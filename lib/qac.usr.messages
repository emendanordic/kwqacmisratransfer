* qac.usr.messages
*
* copyright:  (c) 2008 - Programming Research
*
* Purpose:  M2CM-2.3-QAC-7.1 configuration user message file
*
* History:  Auto-created from Database on 26-Mar-08
*
* CMS version: 0.1a
*
#levelname                         0     
#levelname                         2     Minor
#levelname                         3     Major
#levelname                         4     M2CM
#levelname                         6     Portability
#levelname                         7     Undefined Behaviour
#levelname                         8     Language Constraints
#levelname                         9     Errors
#define    ANT_information         0     Annotations
#define    CMA_information         0     CMA information
#define    Parser_Rec              0     Recovery
#define    submsg                  0     Sub-Messages
#define    Min_Array               2     Arrays, structures, unions & bit-fields
#define    Min_Brace               2     Bracing and Indentation
#define    Min_Cpp                 2     C++ compatibility
#define    CMA_declaration         2     CMA declaration checks
#define    CMA_maintenance         2     CMA maintenance checks
#define    Min_Const               2     Constants
#define    Min_Ctrl                2     Control flow
#define    Min_Decl                2     Declarations and Definitions
#define    Min_Enum                2     Enumerations
#define    Min_Func                2     Functions
#define    Min_Ident               2     Identifiers
#define    Min_Prom                2     Integral promotion
#define    Min_KandR               2     K&R compatibility
#define    Metrics                 2     Metric thresholds
#define    Obsolete                2     Obsolete
#define    Min_Ops                 2     Operations
#define    Min_Prepro              2     Preprocessor
#define    Min_Stmt                2     Statements
#define    Min_Switch              2     Switch statements
#define    Maj_Decl                3     Declarations and definitions
#define    Maj_Enum                3     Enumerations
#define    Maj_Func                3     Functions
#define    Maj_FLtoI               3     Implicit conversions - float to integer
#define    Maj_ItoFL               3     Implicit conversions - integer to float
#define    Maj_Small               3     Implicit conversions - narrowing
#define    Maj_Pchar               3     Implicit conversions - plain char
#define    Maj_StoUS               3     Implicit conversions - signed to unsigned
#define    Maj_UStoLS              3     Implicit conversions - unsigned to larger signed
#define    Maj_UStoS               3     Implicit conversions - unsigned to signed
#define    Maj_Ops                 3     Operations
#define    Maj_Prepro              3     Preprocessor
#define    Maj_Redun               3     Redundancy
#define    Maj_Stmt                3     Statements
#define    local                   4     Local Standards
#define    ISO_C90_Limits          6     ISO C90 Conformance limits
#define    ISO_C99_Limits          6     ISO C99 Conformance limits
#define    ISO_ImplDef             6     Implementation defined
#define    Lang_ext                6     Language extensions
#define    C99_ext                 6     ISO C99 Language features
#define    CMA_warning             7     CMA undefined
#define    ISO_ExpU                7     Explicitly undefined
#define    ISO_ImpU                7     Implicitly undefined
#define    Constraint              8     Constraint violations
#define    Config                  9     QAC configuration
#define    Syntax                  9     Syntax errors
#define    RULE001_1               4     M2CM Rule 1.1
#define    RULE001_2               4     M2CM Rule 1.2
#define    RULE001_3               4     M2CM Rule 1.3
#define    RULE001_4               4     M2CM Rule 1.4
#define    RULE001_5               4     M2CM Rule 1.5
#define    RULE002_1               4     M2CM Rule 2.1
#define    RULE002_2               4     M2CM Rule 2.2
#define    RULE002_3               4     M2CM Rule 2.3
#define    RULE002_4               4     M2CM Rule 2.4
#define    RULE003_1               4     M2CM Rule 3.1
#define    RULE003_2               4     M2CM Rule 3.2
#define    RULE003_3               4     M2CM Rule 3.3
#define    RULE003_4               4     M2CM Rule 3.4
#define    RULE003_5               4     M2CM Rule 3.5
#define    RULE003_6               4     M2CM Rule 3.6
#define    RULE004_1               4     M2CM Rule 4.1
#define    RULE004_2               4     M2CM Rule 4.2
#define    RULE005_1               4     M2CM Rule 5.1
#define    RULE005_2               4     M2CM Rule 5.2
#define    RULE005_3               4     M2CM Rule 5.3
#define    RULE005_4               4     M2CM Rule 5.4
#define    RULE005_5               4     M2CM Rule 5.5
#define    RULE005_6               4     M2CM Rule 5.6
#define    RULE005_7               4     M2CM Rule 5.7
#define    RULE006_1               4     M2CM Rule 6.1
#define    RULE006_2               4     M2CM Rule 6.2
#define    RULE006_3               4     M2CM Rule 6.3
#define    RULE006_4               4     M2CM Rule 6.4
#define    RULE006_5               4     M2CM Rule 6.5
#define    RULE007_1               4     M2CM Rule 7.1
#define    RULE008_1               4     M2CM Rule 8.1
#define    RULE008_2               4     M2CM Rule 8.2
#define    RULE008_3               4     M2CM Rule 8.3
#define    RULE008_4               4     M2CM Rule 8.4
#define    RULE008_5               4     M2CM Rule 8.5
#define    RULE008_6               4     M2CM Rule 8.6
#define    RULE008_7               4     M2CM Rule 8.7
#define    RULE008_8               4     M2CM Rule 8.8
#define    RULE008_9               4     M2CM Rule 8.9
#define    RULE08_10               4     M2CM Rule 8.10
#define    RULE08_11               4     M2CM Rule 8.11
#define    RULE08_12               4     M2CM Rule 8.12
#define    RULE009_1               4     M2CM Rule 9.1
#define    RULE009_2               4     M2CM Rule 9.2
#define    RULE009_3               4     M2CM Rule 9.3
#define    RULE010_1               4     M2CM Rule 10.1
#define    RULE010_2               4     M2CM Rule 10.2
#define    RULE010_3               4     M2CM Rule 10.3
#define    RULE010_4               4     M2CM Rule 10.4
#define    RULE010_5               4     M2CM Rule 10.5
#define    RULE010_6               4     M2CM Rule 10.6
#define    RULE011_1               4     M2CM Rule 11.1
#define    RULE011_2               4     M2CM Rule 11.2
#define    RULE011_3               4     M2CM Rule 11.3
#define    RULE011_4               4     M2CM Rule 11.4
#define    RULE011_5               4     M2CM Rule 11.5
#define    RULE012_1               4     M2CM Rule 12.1
#define    RULE012_2               4     M2CM Rule 12.2
#define    RULE012_3               4     M2CM Rule 12.3
#define    RULE012_4               4     M2CM Rule 12.4
#define    RULE012_5               4     M2CM Rule 12.5
#define    RULE012_6               4     M2CM Rule 12.6
#define    RULE012_7               4     M2CM Rule 12.7
#define    RULE012_8               4     M2CM Rule 12.8
#define    RULE012_9               4     M2CM Rule 12.9
#define    RULE12_10               4     M2CM Rule 12.10
#define    RULE12_11               4     M2CM Rule 12.11
#define    RULE12_12               4     M2CM Rule 12.12
#define    RULE12_13               4     M2CM Rule 12.13
#define    RULE013_1               4     M2CM Rule 13.1
#define    RULE013_2               4     M2CM Rule 13.2
#define    RULE013_3               4     M2CM Rule 13.3
#define    RULE013_4               4     M2CM Rule 13.4
#define    RULE013_5               4     M2CM Rule 13.5
#define    RULE013_6               4     M2CM Rule 13.6
#define    RULE013_7               4     M2CM Rule 13.7
#define    RULE014_1               4     M2CM Rule 14.1
#define    RULE014_2               4     M2CM Rule 14.2
#define    RULE014_3               4     M2CM Rule 14.3
#define    RULE014_4               4     M2CM Rule 14.4
#define    RULE014_5               4     M2CM Rule 14.5
#define    RULE014_6               4     M2CM Rule 14.6
#define    RULE014_7               4     M2CM Rule 14.7
#define    RULE014_8               4     M2CM Rule 14.8
#define    RULE014_9               4     M2CM Rule 14.9
#define    RULE14_10               4     M2CM Rule 14.10
#define    RULE015_0               4     M2CM Rule 15.0
#define    RULE015_1               4     M2CM Rule 15.1
#define    RULE015_2               4     M2CM Rule 15.2
#define    RULE015_3               4     M2CM Rule 15.3
#define    RULE015_4               4     M2CM Rule 15.4
#define    RULE015_5               4     M2CM Rule 15.5
#define    RULE016_1               4     M2CM Rule 16.1
#define    RULE016_2               4     M2CM Rule 16.2
#define    RULE016_3               4     M2CM Rule 16.3
#define    RULE016_4               4     M2CM Rule 16.4
#define    RULE016_5               4     M2CM Rule 16.5
#define    RULE016_6               4     M2CM Rule 16.6
#define    RULE016_7               4     M2CM Rule 16.7
#define    RULE016_8               4     M2CM Rule 16.8
#define    RULE016_9               4     M2CM Rule 16.9
#define    RULE16_10               4     M2CM Rule 16.10
#define    RULE017_1               4     M2CM Rule 17.1
#define    RULE017_2               4     M2CM Rule 17.2
#define    RULE017_3               4     M2CM Rule 17.3
#define    RULE017_4               4     M2CM Rule 17.4
#define    RULE017_5               4     M2CM Rule 17.5
#define    RULE017_6               4     M2CM Rule 17.6
#define    RULE018_1               4     M2CM Rule 18.1
#define    RULE018_2               4     M2CM Rule 18.2
#define    RULE018_3               4     M2CM Rule 18.3
#define    RULE018_4               4     M2CM Rule 18.4
#define    RULE019_1               4     M2CM Rule 19.1
#define    RULE019_2               4     M2CM Rule 19.2
#define    RULE019_3               4     M2CM Rule 19.3
#define    RULE019_4               4     M2CM Rule 19.4
#define    RULE019_5               4     M2CM Rule 19.5
#define    RULE019_6               4     M2CM Rule 19.6
#define    RULE019_7               4     M2CM Rule 19.7
#define    RULE019_8               4     M2CM Rule 19.8
#define    RULE019_9               4     M2CM Rule 19.9
#define    RULE19_10               4     M2CM Rule 19.10
#define    RULE19_11               4     M2CM Rule 19.11
#define    RULE19_12               4     M2CM Rule 19.12
#define    RULE19_13               4     M2CM Rule 19.13
#define    RULE19_14               4     M2CM Rule 19.14
#define    RULE19_15               4     M2CM Rule 19.15
#define    RULE19_16               4     M2CM Rule 19.16
#define    RULE19_17               4     M2CM Rule 19.17
#define    RULE020_1               4     M2CM Rule 20.1
#define    RULE020_2               4     M2CM Rule 20.2
#define    RULE020_3               4     M2CM Rule 20.3
#define    RULE020_4               4     M2CM Rule 20.4
#define    RULE020_5               4     M2CM Rule 20.5
#define    RULE020_6               4     M2CM Rule 20.6
#define    RULE020_7               4     M2CM Rule 20.7
#define    RULE020_8               4     M2CM Rule 20.8
#define    RULE020_9               4     M2CM Rule 20.9
#define    RULE20_10               4     M2CM Rule 20.10
#define    RULE20_11               4     M2CM Rule 20.11
#define    RULE20_12               4     M2CM Rule 20.12
#define    RULE021_1               4     M2CM Rule 21.1

160    RULE001_2             [U] Using unsupported conversion specifier number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
160    ISO_ExpU              [U] Using unsupported conversion specifier number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

161    RULE001_2             [U] Unknown flags used with 'i' or 'd' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
161    ISO_ExpU              [U] Unknown flags used with 'i' or 'd' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

162    RULE001_2             [U] Unknown flags used with 'o' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
162    ISO_ExpU              [U] Unknown flags used with 'o' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

163    RULE001_2             [U] Unknown flags used with 'u' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
163    ISO_ExpU              [U] Unknown flags used with 'u' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

164    RULE001_2             [U] Unknown flags used with 'x' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
164    ISO_ExpU              [U] Unknown flags used with 'x' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

165    RULE001_2             [U] Unknown flags used with 'X' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
165    ISO_ExpU              [U] Unknown flags used with 'X' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

166    RULE001_2             [U] Unknown flags used with 'f' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
166    ISO_ExpU              [U] Unknown flags used with 'f' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

167    RULE001_2             [U] Unknown flags used with 'e' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
167    ISO_ExpU              [U] Unknown flags used with 'e' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

168    RULE001_2             [U] Unknown flags used with 'E' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
168    ISO_ExpU              [U] Unknown flags used with 'E' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

169    RULE001_2             [U] Unknown flags used with 'g' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
169    ISO_ExpU              [U] Unknown flags used with 'g' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

170    RULE001_2             [U] Unknown flags used with 'G' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
170    ISO_ExpU              [U] Unknown flags used with 'G' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

171    RULE001_2             [U] Unknown flags used with 'c' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
171    ISO_ExpU              [U] Unknown flags used with 'c' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

172    RULE001_2             [U] Unknown flags used with '%%' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
172    ISO_ExpU              [U] Unknown flags used with '%%' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

173    RULE001_2             [U] Unknown flags used with 's' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
173    ISO_ExpU              [U] Unknown flags used with 's' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

174    RULE001_2             [U] Unknown flags used with 'n' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
174    ISO_ExpU              [U] Unknown flags used with 'n' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

175    RULE001_2             [U] Unknown flags used with 'p' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
175    ISO_ExpU              [U] Unknown flags used with 'p' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

176    RULE001_2             [U] Unknown conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
176    ISO_ExpU              [U] Unknown conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

177    RULE001_2             [U] Field width exceeds 509 characters.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.1 Environmental limit
177    ISO_ExpU              [U] Field width exceeds 509 characters.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.1 Environmental limit

178    RULE001_2             [U] Precision width exceeds 509 characters.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.1 Environmental limit
178    ISO_ExpU              [U] Precision width exceeds 509 characters.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.1 Environmental limit

179    RULE001_2             [U] Argument type does not match conversion specifier number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
179    ISO_ExpU              [U] Argument type does not match conversion specifier number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

180    RULE001_1             [C99] Use of ll for conversion specifier.\\
MISRA-C:2004 Rule 1.1
180    C99_ext               [C99] Use of ll for conversion specifier.\\
MISRA-C:2004 Rule 1.1

184    RULE001_2             [U] Insufficient arguments to satisfy conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions
184    ISO_ExpU              [U] Insufficient arguments to satisfy conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6 Formatted input/output functions

185    RULE001_2             [U] Call contains more arguments than conversion specifiers.\\
MISRA-C:2004 Rule 1.2
185    ISO_ExpU              [U] Call contains more arguments than conversion specifiers.\\
MISRA-C:2004 Rule 1.2

186    RULE001_2             [U] Call must contain at least one argument.\\
MISRA-C:2004 Rule 1.2
186    ISO_ExpU              [U] Call must contain at least one argument.\\
MISRA-C:2004 Rule 1.2

190    RULE001_2             [U] Using unsupported conversion specifier number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
190    ISO_ExpU              [U] Using unsupported conversion specifier number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

191    RULE001_2             [U] Unknown flags used with 'd/i/n' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
191    ISO_ExpU              [U] Unknown flags used with 'd/i/n' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

192    RULE001_2             [U] Unknown flags used with 'o' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
192    ISO_ExpU              [U] Unknown flags used with 'o' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

193    RULE001_2             [U] Unknown flags used with 'u' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
193    ISO_ExpU              [U] Unknown flags used with 'u' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

194    RULE001_2             [U] Unknown flags used with 'x/X' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
194    ISO_ExpU              [U] Unknown flags used with 'x/X' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

195    RULE001_2             [U] Unknown flags used with 'e/E/f/g/G' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
195    ISO_ExpU              [U] Unknown flags used with 'e/E/f/g/G' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

196    RULE001_2             [U] Unknown flags used with 's' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
196    ISO_ExpU              [U] Unknown flags used with 's' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

197    RULE001_2             [U] Unknown flags used with 'p' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
197    ISO_ExpU              [U] Unknown flags used with 'p' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

198    RULE001_2             [U] Unknown flags used with '%%' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
198    ISO_ExpU              [U] Unknown flags used with '%%' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

199    RULE001_2             [U] Unknown flags used with '[' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
199    ISO_ExpU              [U] Unknown flags used with '[' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

200    RULE001_2             [U] Unknown flags used with 'c' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
200    ISO_ExpU              [U] Unknown flags used with 'c' conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

201    RULE001_2             [U] Unknown conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
201    ISO_ExpU              [U] Unknown conversion specifier, number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

202    RULE003_1             [I] '-' character in '[]' conversion specification is implementation defined.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
202    ISO_ImplDef           [I] '-' character in '[]' conversion specification is implementation defined.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

203    RULE001_2             [U] Value of character prior to '-' in '[]' is greater than following character.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.4
203    ISO_ExpU              [U] Value of character prior to '-' in '[]' is greater than following character.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.4

204    RULE001_2             [U] Field width exceeds 509 characters.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-5.2.4.1
204    ISO_ExpU              [U] Field width exceeds 509 characters.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-5.2.4.1

206    RULE001_2             [U] Argument type does not match conversion specifier number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
206    ISO_ExpU              [U] Argument type does not match conversion specifier number %s.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

207    RULE001_2             [U] 'scanf' expects address of objects being stored into.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9, ISO:C90-7.9.6.4
207    ISO_ExpU              [U] 'scanf' expects address of objects being stored into.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9, ISO:C90-7.9.6.4

208    RULE001_2             [U] Same character occurs in scanset more than once.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions
208    ISO_ExpU              [U] Same character occurs in scanset more than once.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.9.6.2 Formatted input/output functions

235    RULE004_1             [U] Unknown escape sequence.\\
MISRA-C:2004 Rule 4.1; REFERENCE - ISO:C90-6.1.3.4 Description, ISO:C90-6.9.2 Future Language Directions
235    ISO_ExpU              [U] Unknown escape sequence.\\
MISRA-C:2004 Rule 4.1; REFERENCE - ISO:C90-6.1.3.4 Description, ISO:C90-6.9.2 Future Language Directions

240    RULE001_1             [E] This file contains the control-M character at the end of a line.\\
MISRA-C:2004 Rule 1.1
240    Lang_ext              [E] This file contains the control-M character at the end of a line.\\
MISRA-C:2004 Rule 1.1

241    RULE001_1             [E] This file contains the control-Z character - was this transferred from a PC?\\
MISRA-C:2004 Rule 1.1
241    Lang_ext              [E] This file contains the control-Z character - was this transferred from a PC?\\
MISRA-C:2004 Rule 1.1

246    RULE001_1             [E] Binary integer constants are a language extension.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-6.1.3.2 Integer Constants
246    Lang_ext              [E] Binary integer constants are a language extension.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-6.1.3.2 Integer Constants

271    RULE003_1             [I] Result of << on value of constant signed expression is implementation defined.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-6.3.7, ISO:C90-6.4
271    ISO_ImplDef           [I] Result of << on value of constant signed expression is implementation defined.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-6.3.7, ISO:C90-6.4

272    RULE021_1             [I] Value of integer expression is apparently not representable in the signed result type.\\
MISRA-C:2004 Rule 21.1; REFERENCE - ISO:C90-6.2.1.2 Conversions (to Signed Integers)
272    ISO_ImplDef           [I] Value of integer expression is apparently not representable in the signed result type.\\
MISRA-C:2004 Rule 21.1; REFERENCE - ISO:C90-6.2.1.2 Conversions (to Signed Integers)

273    RULE021_1             [I] Value of integer expression is definitely not representable in the signed result type.\\
MISRA-C:2004 Rule 21.1; REFERENCE - ISO:C90-6.2.1.2 Conversions (to Signed Integers)
273    ISO_ImplDef           [I] Value of integer expression is definitely not representable in the signed result type.\\
MISRA-C:2004 Rule 21.1; REFERENCE - ISO:C90-6.2.1.2 Conversions (to Signed Integers)

274    RULE003_1             [I] Value of integer constant expression is not representable in the signed result type.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-6.2.1.2 Conversions (to Signed Integers)
274    ISO_ImplDef           [I] Value of integer constant expression is not representable in the signed result type.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-6.2.1.2 Conversions (to Signed Integers)

275    RULE001_2             [U] Floating value is out of range for conversion to destination type.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.2.1.3 Conversions (Floating and Integral)
275    ISO_ExpU              [U] Floating value is out of range for conversion to destination type.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.2.1.3 Conversions (Floating and Integral)

277    RULE003_1             [I] An integer constant expression with negative value is being converted to an unsigned type.\\
MISRA-C:2004 Rule 3.1; REFERENCE ISO:C90-6.2.1.2
277    ISO_ImplDef           [I] An integer constant expression with negative value is being converted to an unsigned type.\\
MISRA-C:2004 Rule 3.1; REFERENCE ISO:C90-6.2.1.2

284    RULE003_1             [I] Multiple character constants have implementation defined values.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-6.1.3.4 Semantics
284    ISO_ImplDef           [I] Multiple character constants have implementation defined values.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-6.1.3.4 Semantics

285    RULE003_1             [I] Character is not a member of the basic source character set.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-5.2.1 Character Sets
285    ISO_ImplDef           [I] Character is not a member of the basic source character set.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-5.2.1 Character Sets

286    RULE003_1             [I] String literal contains character which is not a member of the basic source character set.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-5.2.1 Character Sets
286    ISO_ImplDef           [I] String literal contains character which is not a member of the basic source character set.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-5.2.1 Character Sets

287    RULE003_1             [I] Header name contains character which is not a member of the basic source character set.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-5.2.1 Character Sets
287    ISO_ImplDef           [I] Header name contains character which is not a member of the basic source character set.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-5.2.1 Character Sets

288    RULE003_1             [I] Source file '%s' has comments containing characters which are not members of the basic source character set.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-5.2.1 Character Sets
288    ISO_ImplDef           [I] Source file '%s' has comments containing characters which are not members of the basic source character set.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-5.2.1 Character Sets

289    RULE003_1             [I] Source file '%s' has preprocessing tokens containing characters which are not members of the basic source character set.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-5.2.1 Character Sets
289    ISO_ImplDef           [I] Source file '%s' has preprocessing tokens containing characters which are not members of the basic source character set.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-5.2.1 Character Sets

290    RULE021_1             An integer expression with a value that is definitely negative is being converted to an unsigned type.\\
MISRA-C:2004 Rule 21.1; REFERENCE ISO:C90-6.2.1.2
290    Maj_Ops               An integer expression with a value that is definitely negative is being converted to an unsigned type.\\
MISRA-C:2004 Rule 21.1; REFERENCE ISO:C90-6.2.1.2

291    RULE021_1             An integer expression with a value that is apparently negative is being converted to an unsigned type.\\
MISRA-C:2004 Rule 21.1; REFERENCE ISO:C90-6.2.1.2
291    Maj_Ops               An integer expression with a value that is apparently negative is being converted to an unsigned type.\\
MISRA-C:2004 Rule 21.1; REFERENCE ISO:C90-6.2.1.2

292    RULE003_1             [I] Source file '%s' has comments containing characters which are not members of the basic source character set ('$', '@' or '`').\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-5.2.1 Character Sets
292    ISO_ImplDef           [I] Source file '%s' has comments containing characters which are not members of the basic source character set ('$', '@' or '`').\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-5.2.1 Character Sets

294    RULE003_1             [I] Result of << on value of signed expression is definitely implementation defined.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-6.3
294    ISO_ImplDef           [I] Result of << on value of signed expression is definitely implementation defined.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-6.3

295    RULE003_1             [I] Result of << on value of signed expression is apparently implementation defined.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-6.3
295    ISO_ImplDef           [I] Result of << on value of signed expression is apparently implementation defined.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-6.3

296    RULE021_1             [U] Value of signed expression is definitely not representable.\\
MISRA-C:2004 Rule 21.1; REFERENCE - ISO:C90-6.3
296    ISO_ExpU              [U] Value of signed expression is definitely not representable.\\
MISRA-C:2004 Rule 21.1; REFERENCE - ISO:C90-6.3

297    RULE021_1             [U] Value of signed expression is apparently not representable.\\
MISRA-C:2004 Rule 21.1; REFERENCE - ISO:C90-6.3
297    ISO_ExpU              [U] Value of signed expression is apparently not representable.\\
MISRA-C:2004 Rule 21.1; REFERENCE - ISO:C90-6.3

299    RULE003_1             [I] Source file '%s' includes #pragma directives containing characters which are not members of the basic source character set.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-5.2.1 Character Sets
299    ISO_ImplDef           [I] Source file '%s' includes #pragma directives containing characters which are not members of the basic source character set.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-5.2.1 Character Sets

301    RULE011_2             [u] Cast between a pointer to object and a floating type.\\
MISRA-C:2004 Rule 11.2; REFERENCE - ISO:C90-6.3.4 Semantics
301    ISO_ImpU              [u] Cast between a pointer to object and a floating type.\\
MISRA-C:2004 Rule 11.2; REFERENCE - ISO:C90-6.3.4 Semantics

302    RULE011_1             [u] Cast between a pointer to function and a floating type.\\
MISRA-C:2004 Rule 11.1; REFERENCE - ISO:C90-6.3.4 Semantics
302    ISO_ImpU              [u] Cast between a pointer to function and a floating type.\\
MISRA-C:2004 Rule 11.1; REFERENCE - ISO:C90-6.3.4 Semantics

303    RULE011_3             [I] Cast between a pointer to volatile object and an integral type.\\
MISRA-C:2004 Rule 11.3; REFERENCE - ISO:C90-6.3.4 Semantics
303    ISO_ImplDef           [I] Cast between a pointer to volatile object and an integral type.\\
MISRA-C:2004 Rule 11.3; REFERENCE - ISO:C90-6.3.4 Semantics

304    RULE001_2             [U] The address of an array declared 'register' may not be computed.\\
MISRA-C:2004 Rule 1.2
304    ISO_ExpU              [U] The address of an array declared 'register' may not be computed.\\
MISRA-C:2004 Rule 1.2

305    RULE011_3             [I] Cast between a pointer to function and an integral type.\\
MISRA-C:2004 Rule 11.3; REFERENCE - ISO:C90-6.3.4 Semantics
305    ISO_ImplDef           [I] Cast between a pointer to function and an integral type.\\
MISRA-C:2004 Rule 11.3; REFERENCE - ISO:C90-6.3.4 Semantics

306    RULE011_3             [I] Cast between a pointer to object and an integral type.\\
MISRA-C:2004 Rule 11.3; REFERENCE - ISO:C90-6.3.4 Semantics
306    ISO_ImplDef           [I] Cast between a pointer to object and an integral type.\\
MISRA-C:2004 Rule 11.3; REFERENCE - ISO:C90-6.3.4 Semantics

307    RULE011_1             [u] Cast between a pointer to object and a pointer to function.\\
MISRA-C:2004 Rule 11.1; REFERENCE - ISO:C90-6.3.4 Semantics
307    ISO_ImpU              [u] Cast between a pointer to object and a pointer to function.\\
MISRA-C:2004 Rule 11.1; REFERENCE - ISO:C90-6.3.4 Semantics

308    RULE003_1             Non-portable cast involving pointer to an incomplete type.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-6.3.4 Semantics
308    Min_Ops               Non-portable cast involving pointer to an incomplete type.\\
MISRA-C:2004 Rule 3.1; REFERENCE - ISO:C90-6.3.4 Semantics

309    RULE001_2             [U] Integral type is not large enough to hold a pointer value.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.3.4 Semantics
309    ISO_ExpU              [U] Integral type is not large enough to hold a pointer value.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.3.4 Semantics

310    RULE011_4             Casting to different object pointer type.\\
MISRA-C:2004 Rule 11.4; REFERENCE - ISO:C90-6.3.4 Cast Operators
310    Min_Ops               Casting to different object pointer type.\\
MISRA-C:2004 Rule 11.4; REFERENCE - ISO:C90-6.3.4 Cast Operators

311    RULE011_5             Dangerous pointer cast results in loss of const qualification.\\
MISRA-C:2004 Rule 11.5
311    Maj_Ops               Dangerous pointer cast results in loss of const qualification.\\
MISRA-C:2004 Rule 11.5

312    RULE011_5             Dangerous pointer cast results in loss of volatile qualification.\\
MISRA-C:2004 Rule 11.5
312    Maj_Ops               Dangerous pointer cast results in loss of volatile qualification.\\
MISRA-C:2004 Rule 11.5

313    RULE011_1             Casting to different function pointer type.\\
MISRA-C:2004 Rule 11.1; REFERENCE - ISO:C90-6.3.4 Cast Operators
313    Min_Ops               Casting to different function pointer type.\\
MISRA-C:2004 Rule 11.1; REFERENCE - ISO:C90-6.3.4 Cast Operators

320    RULE001_1             [C99] Declaration within 'for' statement.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C99-6.8.5 Iteration statements
320    C99_ext               [C99] Declaration within 'for' statement.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C99-6.8.5 Iteration statements

336    RULE007_1             Macro defined as an octal constant.\\
MISRA-C:2004 Rule 7.1
336    Min_Const             Macro defined as an octal constant.\\
MISRA-C:2004 Rule 7.1

337    RULE001_2             [U] String literal has undefined value. This may be a result of using '#' on \\.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.8.3.2 Semantics
337    ISO_ExpU              [U] String literal has undefined value. This may be a result of using '#' on \\.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.8.3.2 Semantics

339    RULE007_1             Octal constant used.\\
MISRA-C:2004 Rule 7.1
339    Min_Const             Octal constant used.\\
MISRA-C:2004 Rule 7.1

341    RULE19_13             K&R compilers do not support the ISO stringify operator '#'.\\
MISRA-C:2004 Rule 19.13
341    Min_KandR             K&R compilers do not support the ISO stringify operator '#'.\\
MISRA-C:2004 Rule 19.13

342    RULE19_13             K&R compilers do not support the ISO glue operator '##'.\\
MISRA-C:2004 Rule 19.13
342    Min_KandR             K&R compilers do not support the ISO glue operator '##'.\\
MISRA-C:2004 Rule 19.13

400    RULE012_2             [U] '%s' is modified more than once between sequence points - evaluation order undefined.\\
MISRA-C:2004 Rule 12.2; REFERENCE - ISO:C90-5.1.2.3 Program Execution
400    ISO_ExpU              [U] '%s' is modified more than once between sequence points - evaluation order undefined.\\
MISRA-C:2004 Rule 12.2; REFERENCE - ISO:C90-5.1.2.3 Program Execution

401    RULE012_2             [U] '%s' may be modified more than once between sequence points - evaluation order undefined.\\
MISRA-C:2004 Rule 12.2; REFERENCE - ISO:C90-5.1.2.3 Program Execution
401    ISO_ExpU              [U] '%s' may be modified more than once between sequence points - evaluation order undefined.\\
MISRA-C:2004 Rule 12.2; REFERENCE - ISO:C90-5.1.2.3 Program Execution

402    RULE012_2             [U] '%s' is modified and accessed between sequence points - evaluation order undefined.\\
MISRA-C:2004 Rule 12.2; REFERENCE - ISO:C90-5.1.2.3 Program Execution
402    ISO_ExpU              [U] '%s' is modified and accessed between sequence points - evaluation order undefined.\\
MISRA-C:2004 Rule 12.2; REFERENCE - ISO:C90-5.1.2.3 Program Execution

403    RULE012_2             [U] '%s' may be modified and accessed between sequence points - evaluation order undefined.\\
MISRA-C:2004 Rule 12.2; REFERENCE - ISO:C90-5.1.2.3 Program Execution
403    ISO_ExpU              [U] '%s' may be modified and accessed between sequence points - evaluation order undefined.\\
MISRA-C:2004 Rule 12.2; REFERENCE - ISO:C90-5.1.2.3 Program Execution

410    RULE001_1             [L] Nesting of parentheses exceeds 32 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits
410    ISO_C90_Limits        [L] Nesting of parentheses exceeds 32 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits

422    RULE016_6             [C] Function call contains fewer arguments than prototype specifies.\\
MISRA-C:2004 Rule 16.6; REFERENCE - ISO:C90-6.3.2.2 Function calls
422    Constraint            [C] Function call contains fewer arguments than prototype specifies.\\
MISRA-C:2004 Rule 16.6; REFERENCE - ISO:C90-6.3.2.2 Function calls

423    RULE016_6             [C] Function call contains more arguments than prototype specifies.\\
MISRA-C:2004 Rule 16.6; REFERENCE - ISO:C90-6.3.2.2 Function calls
423    Constraint            [C] Function call contains more arguments than prototype specifies.\\
MISRA-C:2004 Rule 16.6; REFERENCE - ISO:C90-6.3.2.2 Function calls

475    RULE001_2             [u] Bit-field expression has undefined size.\\
MISRA-C:2004 Rule 1.2
475    ISO_ImpU              [u] Bit-field expression has undefined size.\\
MISRA-C:2004 Rule 1.2

488    RULE017_4             Performing pointer arithmetic.\\
MISRA-C:2004 Rule 17.4
488    Min_Ops               Performing pointer arithmetic.\\
MISRA-C:2004 Rule 17.4

489    RULE017_4             Increment or decrement operation performed on pointer.\\
MISRA-C:2004 Rule 17.4
489    Min_Ops               Increment or decrement operation performed on pointer.\\
MISRA-C:2004 Rule 17.4

499    RULE012_8             Right operand of shift operator is greater than or equal to the width of the underlying type.\\
MISRA-C:2004 Rule 12.8
499    Min_Ops               Right operand of shift operator is greater than or equal to the width of the underlying type.\\
MISRA-C:2004 Rule 12.8

500    RULE012_8             [U] Right operand of shift operator is negative - this is undefined.\\
MISRA-C:2004 Rule 12.8; REFERENCE - ISO:C90-6.3.7 Semantics
500    ISO_ExpU              [U] Right operand of shift operator is negative - this is undefined.\\
MISRA-C:2004 Rule 12.8; REFERENCE - ISO:C90-6.3.7 Semantics

501    RULE012_8             [U] Right operand of shift operator is too large - this is undefined.\\
MISRA-C:2004 Rule 12.8; REFERENCE - ISO:C90-6.3.7 Semantics
501    ISO_ExpU              [U] Right operand of shift operator is too large - this is undefined.\\
MISRA-C:2004 Rule 12.8; REFERENCE - ISO:C90-6.3.7 Semantics

502    RULE012_7             A right shift on signed data may be an arithmetic or a logical shift.\\
MISRA-C:2004 Rule 12.7
502    Min_Ops               A right shift on signed data may be an arithmetic or a logical shift.\\
MISRA-C:2004 Rule 12.7

503    RULE001_2             [U] Dereferencing NULL pointer.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.3.3.2 Semantics
503    ISO_ExpU              [U] Dereferencing NULL pointer.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.3.3.2 Semantics

504    RULE001_2             [U] Dereferencing pointer value that is definitely NULL.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.3.3.2 Semantics
504    ISO_ExpU              [U] Dereferencing pointer value that is definitely NULL.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.3.3.2 Semantics

505    RULE001_2             [U] Dereferencing pointer value that is apparently NULL.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.3.3.2 Semantics
505    ISO_ExpU              [U] Dereferencing pointer value that is apparently NULL.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.3.3.2 Semantics

507    RULE001_2             [u] Arithmetic operation on NULL pointer.\\
MISRA-C:2004 Rule 1.2
507    ISO_ImpU              [u] Arithmetic operation on NULL pointer.\\
MISRA-C:2004 Rule 1.2

508    RULE001_2             [u] Arithmetic operation on pointer value that is definitely NULL.\\
MISRA-C:2004 Rule 1.2
508    ISO_ImpU              [u] Arithmetic operation on pointer value that is definitely NULL.\\
MISRA-C:2004 Rule 1.2

509    RULE001_2             [u] Arithmetic operation on pointer value that is apparently NULL.\\
MISRA-C:2004 Rule 1.2
509    ISO_ImpU              [u] Arithmetic operation on pointer value that is apparently NULL.\\
MISRA-C:2004 Rule 1.2

541    RULE001_2             [u] Argument no. %s does not have object type.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.3.2.2 Semantics
541    ISO_ImpU              [u] Argument no. %s does not have object type.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.3.2.2 Semantics

543    RULE001_2             [U] 'void' expressions have no value and may not be used in expressions.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.2.2.2 void
543    ISO_ExpU              [U] 'void' expressions have no value and may not be used in expressions.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.2.2.2 void

544    RULE018_1             [U] The value of an incomplete 'union' may not be used.\\
MISRA-C:2004 Rule 18.1; REFERENCE - ISO:C90-6.2.2.1 lvalues
544    ISO_ExpU              [U] The value of an incomplete 'union' may not be used.\\
MISRA-C:2004 Rule 18.1; REFERENCE - ISO:C90-6.2.2.1 lvalues

545    RULE018_1             [U] The value of an incomplete 'struct' may not be used.\\
MISRA-C:2004 Rule 18.1; REFERENCE - ISO:C90-6.2.2.1 lvalues
545    ISO_ExpU              [U] The value of an incomplete 'struct' may not be used.\\
MISRA-C:2004 Rule 18.1; REFERENCE - ISO:C90-6.2.2.1 lvalues

546    RULE001_2             [C] 'enum %s' has unknown content. Use of an enum tag with undefined content is not permitted.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.5.2.3
546    Constraint            [C] 'enum %s' has unknown content. Use of an enum tag with undefined content is not permitted.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.5.2.3

547    RULE005_4             [U] This declaration of tag '%s' conflicts with a previous declaration.\\
MISRA-C:2004 Rule 5.4
547    ISO_ExpU              [U] This declaration of tag '%s' conflicts with a previous declaration.\\
MISRA-C:2004 Rule 5.4

551    RULE001_1             [E] Cast may not operate on the left operand of the assignment operator.\\
MISRA-C:2004 Rule 1.1
551    Lang_ext              [E] Cast may not operate on the left operand of the assignment operator.\\
MISRA-C:2004 Rule 1.1

585    RULE021_1             [U] Division by value that is apparently zero.\\
MISRA-C:2004 Rule 21.1
585    ISO_ExpU              [U] Division by value that is apparently zero.\\
MISRA-C:2004 Rule 21.1

586    RULE001_2             [U] Division by constant zero value.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.3.5 Semantics
586    ISO_ExpU              [U] Division by constant zero value.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.3.5 Semantics

587    RULE021_1             [U] Division by value that is definitely zero.\\
MISRA-C:2004 Rule 21.1; REFERENCE - ISO:C90-6.3.5 Semantics
587    ISO_ExpU              [U] Division by value that is definitely zero.\\
MISRA-C:2004 Rule 21.1; REFERENCE - ISO:C90-6.3.5 Semantics

594    RULE014_1             Negative 'case' label expression is incompatible with unsigned switch control expression.\\
MISRA-C:2004 Rule 14.1
594    Maj_Stmt              Negative 'case' label expression is incompatible with unsigned switch control expression.\\
MISRA-C:2004 Rule 14.1

601    RULE001_1             [E] Function 'main()' is not of type 'int (void)' or 'int (int, char *[])'.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.1.2.2 Hosted environment
601    Lang_ext              [E] Function 'main()' is not of type 'int (void)' or 'int (int, char *[])'.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.1.2.2 Hosted environment

602    RULE020_2             [U] The identifier '%s' is reserved for use by the library.\\
MISRA-C:2004 Rule 20.2; REFERENCE - ISO:C90-7.1.3 Reserved Identifiers
602    ISO_ExpU              [U] The identifier '%s' is reserved for use by the library.\\
MISRA-C:2004 Rule 20.2; REFERENCE - ISO:C90-7.1.3 Reserved Identifiers

604    RULE001_1             [C99] Declaration appears after statements in a compound statement.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-6.6.2 Syntax
604    C99_ext               [C99] Declaration appears after statements in a compound statement.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-6.6.2 Syntax

606    RULE008_3             Object '%s' is declared using typedefs which are different to those in a previous declaration.\\
MISRA-C:2004 Rule 8.3; REFERENCE - ISO:C90-6.1.2.6 Compatible Type and Composite Type
606    Min_Decl              Object '%s' is declared using typedefs which are different to those in a previous declaration.\\
MISRA-C:2004 Rule 8.3; REFERENCE - ISO:C90-6.1.2.6 Compatible Type and Composite Type

609    RULE001_1             [L] Number of modifiers in declarator exceeds 12 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits
609    ISO_C90_Limits        [L] Number of modifiers in declarator exceeds 12 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits

611    RULE001_1             [L] Nesting of 'struct' or 'union' types exceeds 15 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits
611    ISO_C90_Limits        [L] Nesting of 'struct' or 'union' types exceeds 15 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits

612    RULE001_1             [L] Size of object '%s' exceeds 32767 bytes - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits
612    ISO_C90_Limits        [L] Size of object '%s' exceeds 32767 bytes - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits

614    RULE001_1             [L] Number of block scope identifiers exceeds 127 in a block - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits
614    ISO_C90_Limits        [L] Number of block scope identifiers exceeds 127 in a block - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits

623    RULE018_1             [U] '%s' has incomplete type and no linkage - this is undefined.\\
MISRA-C:2004 Rule 18.1; REFERENCE - ISO:C90-6.5 Semantics
623    ISO_ExpU              [U] '%s' has incomplete type and no linkage - this is undefined.\\
MISRA-C:2004 Rule 18.1; REFERENCE - ISO:C90-6.5 Semantics

624    RULE008_3             Function '%s' is declared using typedefs which are different to those in a previous declaration.\\
MISRA-C:2004 Rule 8.3; REFERENCE - ISO:C90-6.1.2.6 Compatible Type and Composite Type
624    Min_Decl              Function '%s' is declared using typedefs which are different to those in a previous declaration.\\
MISRA-C:2004 Rule 8.3; REFERENCE - ISO:C90-6.1.2.6 Compatible Type and Composite Type

625    RULE001_2             [U] '%s' has been declared with both internal and external linkage - the behaviour is undefined.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.1.2.2 Linkages of Identifiers
625    ISO_ExpU              [U] '%s' has been declared with both internal and external linkage - the behaviour is undefined.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.1.2.2 Linkages of Identifiers

626    RULE008_4             [u] '%s' has different type to previous declaration (which is no longer in scope).\\
MISRA-C:2004 Rule 8.4
626    ISO_ImpU              [u] '%s' has different type to previous declaration (which is no longer in scope).\\
MISRA-C:2004 Rule 8.4

627    RULE008_4             [C] '%s' has different type to previous declaration in the same scope.\\
MISRA-C:2004 Rule 8.4; REFERENCE - ISO:C90-6.5 Constraints
627    Constraint            [C] '%s' has different type to previous declaration in the same scope.\\
MISRA-C:2004 Rule 8.4; REFERENCE - ISO:C90-6.5 Constraints

628    RULE008_4             [C] '%s' has different type to previous in-scope declaration.\\
MISRA-C:2004 Rule 8.4; REFERENCE - ISO:C90-6.5 Constraints
628    Constraint            [C] '%s' has different type to previous in-scope declaration.\\
MISRA-C:2004 Rule 8.4; REFERENCE - ISO:C90-6.5 Constraints

630    RULE008_9             [U] More than one definition of '%s' (with external linkage).\\
MISRA-C:2004 Rule 8.9; REFERENCE - ISO:C90-6.7 Semantics
630    ISO_ExpU              [U] More than one definition of '%s' (with external linkage).\\
MISRA-C:2004 Rule 8.9; REFERENCE - ISO:C90-6.7 Semantics

632    RULE001_2             [U] Tentative definition of '%s' with internal linkage cannot have unknown size.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.7.2 Semantics
632    ISO_ExpU              [U] Tentative definition of '%s' with internal linkage cannot have unknown size.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.7.2 Semantics

633    RULE001_1             [E] Empty structures and unions are a language extension.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-6.5.2.1 Syntax
633    Lang_ext              [E] Empty structures and unions are a language extension.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-6.5.2.1 Syntax

634    RULE006_4             [I] Bit-field is not declared explicitly as unsigned or signed.\\
MISRA-C:2004 Rule 6.4; REFERENCE - ISO:C90-6.5.2.1 Semantics
634    ISO_ImplDef           [I] Bit-field is not declared explicitly as unsigned or signed.\\
MISRA-C:2004 Rule 6.4; REFERENCE - ISO:C90-6.5.2.1 Semantics

635    RULE006_4             [E] Bit-fields not of type int, signed int or unsigned int are not supported in ISO-C.\\
MISRA-C:2004 Rule 6.4; REFERENCE - ISO:C90-6.5.2.1 Semantics
635    Lang_ext              [E] Bit-fields not of type int, signed int or unsigned int are not supported in ISO-C.\\
MISRA-C:2004 Rule 6.4; REFERENCE - ISO:C90-6.5.2.1 Semantics

636    RULE018_1             [U] There are no named members in this 'struct' or 'union'.\\
MISRA-C:2004 Rule 18.1; REFERENCE - ISO:C90-6.5.2.1 Semantics
636    ISO_ExpU              [U] There are no named members in this 'struct' or 'union'.\\
MISRA-C:2004 Rule 18.1; REFERENCE - ISO:C90-6.5.2.1 Semantics

639    RULE001_1             [L] Number of members in 'struct' or 'union' exceeds 127 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits
639    ISO_C90_Limits        [L] Number of members in 'struct' or 'union' exceeds 127 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits

647    RULE001_1             [L] Number of enumeration constants exceeds 127 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits
647    ISO_C90_Limits        [L] Number of enumeration constants exceeds 127 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits

652    RULE016_3             [u] Identifiers have been provided for some but not all of the parameters in a function prototype.\\
MISRA-C:2004 Rule 16.3; REFERENCE - ISO:C90-6.5.4.3 Constraints
652    ISO_ImpU              [u] Identifiers have been provided for some but not all of the parameters in a function prototype.\\
MISRA-C:2004 Rule 16.3; REFERENCE - ISO:C90-6.5.4.3 Constraints

654    RULE001_2             [U] Using 'const' or 'volatile' in a function return type is undefined.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.5.3 Semantics
654    ISO_ExpU              [U] Using 'const' or 'volatile' in a function return type is undefined.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.5.3 Semantics

658    RULE001_2             [U] Parameter cannot have 'void' type.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.5.4.3 Semantics
658    ISO_ExpU              [U] Parameter cannot have 'void' type.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.5.4.3 Semantics

661    RULE001_2             [U] '%s()' may not have a storage class specifier of 'static' when declared locally.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.5.1 Semantics
661    ISO_ExpU              [U] '%s()' may not have a storage class specifier of 'static' when declared locally.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.5.1 Semantics

662    RULE001_1             [E] Accessing a member of a nested structure in this way is a language extension.\\
MISRA-C:2004 Rule 1.1
662    Lang_ext              [E] Accessing a member of a nested structure in this way is a language extension.\\
MISRA-C:2004 Rule 1.1

667    RULE001_2             [U] '%s' is declared as a typedef and may not be redeclared in an inner scope without a type specifier.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.5.6 Semantics
667    ISO_ExpU              [U] '%s' is declared as a typedef and may not be redeclared in an inner scope without a type specifier.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.5.6 Semantics

668    RULE001_2             [U] '%s' is declared as a typedef and may not be redeclared as a member of a 'struct' or 'union' without a type specifier.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.5.6 Semantics
668    ISO_ExpU              [U] '%s' is declared as a typedef and may not be redeclared as a member of a 'struct' or 'union' without a type specifier.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.5.6 Semantics

672    RULE001_2             [U] The initializer for a 'struct', 'union' or array is not enclosed in braces.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.5.7 Semantics
672    ISO_ExpU              [U] The initializer for a 'struct', 'union' or array is not enclosed in braces.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.5.7 Semantics

675    RULE001_2             [U] Initializer for 'struct' or 'union' does not have compatible type.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.5.7 Semantics
675    ISO_ExpU              [U] Initializer for 'struct' or 'union' does not have compatible type.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.5.7 Semantics

676    RULE001_2             [u] Array base type cannot have function type. QA C has assumed that 'pointer to function' was intended.\\
MISRA-C:2004 Rule 1.2
676    ISO_ImpU              [u] Array base type cannot have function type. QA C has assumed that 'pointer to function' was intended.\\
MISRA-C:2004 Rule 1.2

678    RULE001_2             [u] Array base is array of unknown size. Arrays cannot be constructed from incomplete types.\\
MISRA-C:2004 Rule 1.2
678    ISO_ImpU              [u] Array base is array of unknown size. Arrays cannot be constructed from incomplete types.\\
MISRA-C:2004 Rule 1.2

679    RULE009_2             Redundant braces found in initializer.\\
MISRA-C:2004 Rule 9.2
679    Min_Array             Redundant braces found in initializer.\\
MISRA-C:2004 Rule 9.2

680    RULE001_2             [u] Array base is 'struct' or 'union' of unknown content. Arrays cannot be constructed from incomplete types.\\
MISRA-C:2004 Rule 1.2
680    ISO_ImpU              [u] Array base is 'struct' or 'union' of unknown content. Arrays cannot be constructed from incomplete types.\\
MISRA-C:2004 Rule 1.2

686    RULE009_2             Array has fewer initializers than its declared size. Default initialization is applied to the remainder of the array elements.\\
MISRA-C:2004 Rule 9.2; REFERENCE - ISO:C90-6.5.7 Semantics
686    Maj_Decl              Array has fewer initializers than its declared size. Default initialization is applied to the remainder of the array elements.\\
MISRA-C:2004 Rule 9.2; REFERENCE - ISO:C90-6.5.7 Semantics

689    RULE014_1             Initializer may be jumped over and never applied.\\
MISRA-C:2004 Rule 14.1
689    Maj_Redun             Initializer may be jumped over and never applied.\\
MISRA-C:2004 Rule 14.1

693    RULE009_2             Struct initializer is missing the optional {.\\
MISRA-C:2004 Rule 9.2
693    Min_Array             Struct initializer is missing the optional {.\\
MISRA-C:2004 Rule 9.2

694    RULE009_2             Array initializer is missing the optional {.\\
MISRA-C:2004 Rule 9.2
694    Min_Array             Array initializer is missing the optional {.\\
MISRA-C:2004 Rule 9.2

706    RULE001_2             [u] Label '%s' is not unique within this function.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.6.6.1 Constraints
706    ISO_ImpU              [u] Label '%s' is not unique within this function.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.6.6.1 Constraints

715    RULE001_1             [L] Nesting of control structures (statements) exceeds 15 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits
715    ISO_C90_Limits        [L] Nesting of control structures (statements) exceeds 15 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits

723    RULE009_3             initialize none, first only, or all entries in this enumerator list.\\
MISRA-C:2004 Rule 9.3
723    Min_Enum              initialize none, first only, or all entries in this enumerator list.\\
MISRA-C:2004 Rule 9.3

735    RULE015_4             Using relational or logical operators in a switch expression is usually a programming error.\\
MISRA-C:2004 Rule 15.4
735    Maj_Stmt              Using relational or logical operators in a switch expression is usually a programming error.\\
MISRA-C:2004 Rule 15.4

739    RULE001_1             [L] Number of 'case' labels exceeds 257 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits
739    ISO_C90_Limits        [L] Number of 'case' labels exceeds 257 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits

744    RULE016_8             [U] '%s()' has been declared with a non void result type but ends with an implicit 'return ;' statement.\\
MISRA-C:2004 Rule 16.8
744    ISO_ExpU              [U] '%s()' has been declared with a non void result type but ends with an implicit 'return ;' statement.\\
MISRA-C:2004 Rule 16.8

745    RULE016_8             [U] 'return;' found in '%s()', which has been defined with a non-'void' return type.\\
MISRA-C:2004 Rule 16.8; REFERENCE - ISO:C90-6.6.6.4
745    ISO_ExpU              [U] 'return;' found in '%s()', which has been defined with a non-'void' return type.\\
MISRA-C:2004 Rule 16.8; REFERENCE - ISO:C90-6.6.6.4

747    RULE001_2             [u] 'return exp;' found in '%s()' whose result has qualified 'void' type.\\
MISRA-C:2004 Rule 1.2
747    ISO_ImpU              [u] 'return exp;' found in '%s()' whose result has qualified 'void' type.\\
MISRA-C:2004 Rule 1.2

750    RULE018_4             A union type specifier has been defined.\\
MISRA-C:2004 Rule 18.4
750    Min_Array             A union type specifier has been defined.\\
MISRA-C:2004 Rule 18.4

759    RULE018_4             An object of union type has been defined.\\
MISRA-C:2004 Rule 18.4
759    Min_Array             An object of union type has been defined.\\
MISRA-C:2004 Rule 18.4

770    RULE014_5             A continue statement has been used.\\
MISRA-C:2004 Rule 14.5
770    Min_Ctrl              A continue statement has been used.\\
MISRA-C:2004 Rule 14.5

771    RULE014_6             More than one break statement is being used to terminate an iteration statement.\\
MISRA-C:2004 Rule 14.6
771    Min_Ctrl              More than one break statement is being used to terminate an iteration statement.\\
MISRA-C:2004 Rule 14.6

777    RULE005_1             [U] External identifier does not differ from other identifier(s) (e.g. '%s') within the specified number of significant characters.\\
MISRA-C:2004 Rule 5.1; REFERENCE - ISO:C90-6.1.2 Implementation Limits
777    ISO_ExpU              [U] External identifier does not differ from other identifier(s) (e.g. '%s') within the specified number of significant characters.\\
MISRA-C:2004 Rule 5.1; REFERENCE - ISO:C90-6.1.2 Implementation Limits

779    RULE005_1             [U] Identifier does not differ from other identifier(s) (e.g. '%s') within the specified number of significant characters.\\
MISRA-C:2004 Rule 5.1; REFERENCE - ISO:C90-6.1.2 Implementation Limits
779    ISO_ExpU              [U] Identifier does not differ from other identifier(s) (e.g. '%s') within the specified number of significant characters.\\
MISRA-C:2004 Rule 5.1; REFERENCE - ISO:C90-6.1.2 Implementation Limits

780    RULE005_6             An identifier named '%s' has also been declared in another namespace.\\
MISRA-C:2004 Rule 5.6; REFERENCE - ISO:C90-6.1.2.3 Name Spaces of Identifiers
780    Min_Ident             An identifier named '%s' has also been declared in another namespace.\\
MISRA-C:2004 Rule 5.6; REFERENCE - ISO:C90-6.1.2.3 Name Spaces of Identifiers

781    RULE005_6             '%s' is being used as a structure/union member as well as being a label, tag or ordinary identifier.\\
MISRA-C:2004 Rule 5.6; REFERENCE - ISO:C90-6.1.2.3 Name Spaces of Identifiers
781    Min_Ident             '%s' is being used as a structure/union member as well as being a label, tag or ordinary identifier.\\
MISRA-C:2004 Rule 5.6; REFERENCE - ISO:C90-6.1.2.3 Name Spaces of Identifiers

809    RULE019_3             [U] The '#include' preprocessing directive has not been followed by <h-char-sequence> or "s-char-sequence".\\
MISRA-C:2004 Rule 19.3; REFERENCE - ISO:C90-6.8.2 Semantics
809    ISO_ExpU              [U] The '#include' preprocessing directive has not been followed by <h-char-sequence> or "s-char-sequence".\\
MISRA-C:2004 Rule 19.3; REFERENCE - ISO:C90-6.8.2 Semantics

810    RULE001_1             [L] '#include "%s"' causes nesting to exceed 8 levels - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits
810    ISO_C90_Limits        [L] '#include "%s"' causes nesting to exceed 8 levels - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits

813    RULE019_2             [U] Using any of the characters ' " or /* in '#include <%s>' gives undefined behaviour.\\
MISRA-C:2004 Rule 19.2; REFERENCE - ISO:C90-6.1.7 Header Names
813    ISO_ExpU              [U] Using any of the characters ' " or /* in '#include <%s>' gives undefined behaviour.\\
MISRA-C:2004 Rule 19.2; REFERENCE - ISO:C90-6.1.7 Header Names

814    RULE019_2             [U] Using the characters ' or /* in '#include "%s"' gives undefined behaviour.\\
MISRA-C:2004 Rule 19.2; REFERENCE - ISO:C90-6.1.7 Header Names
814    ISO_ExpU              [U] Using the characters ' or /* in '#include "%s"' gives undefined behaviour.\\
MISRA-C:2004 Rule 19.2; REFERENCE - ISO:C90-6.1.7 Header Names

828    RULE001_1             [L] Maximum '#if...' nesting exceeds 8 levels - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits
828    ISO_C90_Limits        [L] Maximum '#if...' nesting exceeds 8 levels - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits

830    RULE001_1             [E] Preprocessing directive may be followed by whitespace and new-line only. Comments may be used to add extra text to preprocessor directives.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-6.8 Syntax
830    Lang_ext              [E] Preprocessing directive may be followed by whitespace and new-line only. Comments may be used to add extra text to preprocessor directives.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-6.8 Syntax

831    RULE019_2             [E] Use of '\\' in this '#include' line is a PC extension - this usage is non-portable.\\
MISRA-C:2004 Rule 19.2
831    Lang_ext              [E] Use of '\\' in this '#include' line is a PC extension - this usage is non-portable.\\
MISRA-C:2004 Rule 19.2

836    RULE020_1             [U] Definition of macro named 'defined'.\\
MISRA-C:2004 Rule 20.1; REFERENCE - ISO:C90-6.8.8 Predefined Macro Names
836    ISO_ExpU              [U] Definition of macro named 'defined'.\\
MISRA-C:2004 Rule 20.1; REFERENCE - ISO:C90-6.8.8 Predefined Macro Names

837    RULE001_2             [U] Use of '#undef' to remove the operator 'defined'.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.8.8 Predefined Macro Names
837    ISO_ExpU              [U] Use of '#undef' to remove the operator 'defined'.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.8.8 Predefined Macro Names

841    RULE019_6             Use of #undef is not recommended in some programming standards.\\
MISRA-C:2004 Rule 19.6
841    Min_Prepro            Use of #undef is not recommended in some programming standards.\\
MISRA-C:2004 Rule 19.6

842    RULE019_5             Macro #define'd or #undef'd within a block.\\
MISRA-C:2004 Rule 19.5
842    Min_Prepro            Macro #define'd or #undef'd within a block.\\
MISRA-C:2004 Rule 19.5

848    RULE020_1             [U] Use of '#undef' to remove '%s' which is predefined by the compiler.\\
MISRA-C:2004 Rule 20.1; REFERENCE - ISO:C90-6.8.8 Predefined Macro Names
848    ISO_ExpU              [U] Use of '#undef' to remove '%s' which is predefined by the compiler.\\
MISRA-C:2004 Rule 20.1; REFERENCE - ISO:C90-6.8.8 Predefined Macro Names

850    RULE019_8             [C99] Macro argument is empty.\\
MISRA-C:2004 Rule 19.8; REFERENCE - ISO:C90-6.8.3 Semantics; ISO:C99 6.10.3
850    C99_ext               [C99] Macro argument is empty.\\
MISRA-C:2004 Rule 19.8; REFERENCE - ISO:C90-6.8.3 Semantics; ISO:C99 6.10.3

853    RULE019_9             [U] Macro arguments contain a sequence of tokens that has the form of a preprocessing directive.\\
MISRA-C:2004 Rule 19.9; REFERENCE - ISO:C90-6.8.3 Semantics
853    ISO_ExpU              [U] Macro arguments contain a sequence of tokens that has the form of a preprocessing directive.\\
MISRA-C:2004 Rule 19.9; REFERENCE - ISO:C90-6.8.3 Semantics

854    RULE020_1             [U] Redefinition of '%s', which is a predefined macro name.\\
MISRA-C:2004 Rule 20.1; REFERENCE - ISO:C90-6.8.8 Predefined Macro Names
854    ISO_ExpU              [U] Redefinition of '%s', which is a predefined macro name.\\
MISRA-C:2004 Rule 20.1; REFERENCE - ISO:C90-6.8.8 Predefined Macro Names

856    RULE019_8             [C] Fewer arguments in macro call than specified in definition.\\
MISRA-C:2004 Rule 19.8; REFERENCE - ISO:C90-6.8.3 Constraints
856    Constraint            [C] Fewer arguments in macro call than specified in definition.\\
MISRA-C:2004 Rule 19.8; REFERENCE - ISO:C90-6.8.3 Constraints

857    RULE001_1             [L] Number of macro definitions exceeds 1024 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits
857    ISO_C90_Limits        [L] Number of macro definitions exceeds 1024 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits

858    RULE001_1             [L] Number of macro parameters exceeds 31 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits
858    ISO_C90_Limits        [L] Number of macro parameters exceeds 31 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits

859    RULE001_1             [L] Number of arguments in macro call exceeds 31 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits
859    ISO_C90_Limits        [L] Number of arguments in macro call exceeds 31 - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation Limits

864    RULE001_2             [U] '#line digit-sequence' does not specify a line number in the range 1 to 32767.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.8.4 Semantics
864    ISO_ExpU              [U] '#line digit-sequence' does not specify a line number in the range 1 to 32767.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.8.4 Semantics

865    RULE001_2             [U] '#line' directive does not match '#line digit-sequence "s-char-sequence"'.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.8.4 Semantics
865    ISO_ExpU              [U] '#line' directive does not match '#line digit-sequence "s-char-sequence"'.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.8.4 Semantics

867    RULE001_2             [U] '#line' has not been followed by a line number.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.8.4 Semantics
867    ISO_ExpU              [U] '#line' has not been followed by a line number.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.8.4 Semantics

872    RULE001_2             [U] Result of '##' operator is not a legal preprocessing token.\\
MISRA-C:2004 Rule 1.2
872    ISO_ExpU              [U] Result of '##' operator is not a legal preprocessing token.\\
MISRA-C:2004 Rule 1.2

874    RULE001_2             [U] Character string literal and wide character string literal are adjacent.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.1.4 Semantics
874    ISO_ExpU              [U] Character string literal and wide character string literal are adjacent.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.1.4 Semantics

875    RULE001_1             [L] String literal exceeds 509 characters - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation limits
875    ISO_C90_Limits        [L] String literal exceeds 509 characters - program does not conform strictly to ISO:C90.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-5.2.4.1 Translation limits

878    RULE003_1             Using wide character or string literals.\\
MISRA-C:2004 Rule 3.1
878    Min_Const             Using wide character or string literals.\\
MISRA-C:2004 Rule 3.1

880    RULE19_12             Order of evaluation of # and ## operators is unspecified.\\
MISRA-C:2004 Rule 19.12; REFERENCE - ISO:C90-6.8.3.2 Semantics
880    Min_Prepro            Order of evaluation of # and ## operators is unspecified.\\
MISRA-C:2004 Rule 19.12; REFERENCE - ISO:C90-6.8.3.2 Semantics

881    RULE19_12             Order of evaluation of multiple ## operators is unspecified.\\
MISRA-C:2004 Rule 19.12; REFERENCE - ISO:C90-6.8.3.3 Semantics
881    Min_Prepro            Order of evaluation of multiple ## operators is unspecified.\\
MISRA-C:2004 Rule 19.12; REFERENCE - ISO:C90-6.8.3.3 Semantics

883    RULE19_15             Include file code is not protected against repeated inclusion\\
MISRA-C:2004 Rule 19.15
883    Min_Prepro            Include file code is not protected against repeated inclusion\\
MISRA-C:2004 Rule 19.15

884    RULE19_12             Order of evaluation of multiple # operators is unspecified.\\
MISRA-C:2004 Rule 19.12; REFERENCE - ISO:C90-6.8.3.2 Semantics
884    Min_Prepro            Order of evaluation of multiple # operators is unspecified.\\
MISRA-C:2004 Rule 19.12; REFERENCE - ISO:C90-6.8.3.2 Semantics

885    RULE19_14             [U] The token 'defined' is generated in the expansion of this macro.\\
MISRA-C:2004 Rule 19.14; REFERENCE - ISO:C90-6.8.1 Semantics
885    ISO_ExpU              [U] The token 'defined' is generated in the expansion of this macro.\\
MISRA-C:2004 Rule 19.14; REFERENCE - ISO:C90-6.8.1 Semantics

887    RULE19_14             [U] Use of 'defined' must match either 'defined(identifier)' or 'defined identifier'.\\
MISRA-C:2004 Rule 19.14; REFERENCE - ISO:C90-6.8.1 Semantics
887    ISO_ExpU              [U] Use of 'defined' must match either 'defined(identifier)' or 'defined identifier'.\\
MISRA-C:2004 Rule 19.14; REFERENCE - ISO:C90-6.8.1 Semantics

888    RULE19_14             [U] 'defined' requires an identifier as an argument.\\
MISRA-C:2004 Rule 19.14; REFERENCE - ISO:C90-6.8.1 Semantics
888    ISO_ExpU              [U] 'defined' requires an identifier as an argument.\\
MISRA-C:2004 Rule 19.14; REFERENCE - ISO:C90-6.8.1 Semantics

930    RULE001_1             [C99] Trailing comma at the end of an enumerator-list.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-6.5.2.2 Syntax
930    C99_ext               [C99] Trailing comma at the end of an enumerator-list.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-6.5.2.2 Syntax

945    RULE001_1             [C99] WARNING. Operand of sizeof has a type which is a variable length array type.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C99-6.5.3.4 Semantics
945    C99_ext               [C99] WARNING. Operand of sizeof has a type which is a variable length array type.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C99-6.5.3.4 Semantics

1001   RULE001_1             [E] '#include %s' is a VMS extension.\\
MISRA-C:2004 Rule 1.1; REFERENCE ISO:C90-6.8.2 Form of '#include' directives
1001   Lang_ext              [E] '#include %s' is a VMS extension.\\
MISRA-C:2004 Rule 1.1; REFERENCE ISO:C90-6.8.2 Form of '#include' directives

1002   RULE001_1             [E] '%s' is not a legal identifier in ISO C.\\
MISRA-C:2004 Rule 1.1; REFERENCE ISO:C90-6.1.2
1002   Lang_ext              [E] '%s' is not a legal identifier in ISO C.\\
MISRA-C:2004 Rule 1.1; REFERENCE ISO:C90-6.1.2

1003   RULE001_1             [E] '#%s' is a language extension for in-line assembler. All statements located between #asm and #endasm will be ignored.\\
MISRA-C:2004 Rule 1.1; REFERENCE ISO:C90-6.8 Syntax
1003   Lang_ext              [E] '#%s' is a language extension for in-line assembler. All statements located between #asm and #endasm will be ignored.\\
MISRA-C:2004 Rule 1.1; REFERENCE ISO:C90-6.8 Syntax

1006   RULE001_1             [E] This in-line assembler construct is a language extension. The code has been ignored.\\
MISRA-C:2004 Rule 1.1
1006   Lang_ext              [E] This in-line assembler construct is a language extension. The code has been ignored.\\
MISRA-C:2004 Rule 1.1

1008   RULE001_1             [E] '#%s' is not a legal ISO C preprocessing directive.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-6.8 Syntax
1008   Lang_ext              [E] '#%s' is not a legal ISO C preprocessing directive.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C90-6.8 Syntax

1011   RULE002_2             [C99] Use of C++ comment '//'.\\
MISRA-C:2004 Rule 2.2
1011   C99_ext               [C99] Use of C++ comment '//'.\\
MISRA-C:2004 Rule 2.2

1014   RULE001_1             [E] Unusual type specification - this will be treated as a language extension.\\
MISRA-C:2004 Rule 1.1
1014   Lang_ext              [E] Unusual type specification - this will be treated as a language extension.\\
MISRA-C:2004 Rule 1.1

1015   RULE001_1             [E] '%s' is not a legal keyword in ISO C.\\
MISRA-C:2004 Rule 1.1
1015   Lang_ext              [E] '%s' is not a legal keyword in ISO C.\\
MISRA-C:2004 Rule 1.1

1018   RULE001_1             [C99] Using LL suffix.\\
MISRA-C:2004 Rule 1.1
1018   C99_ext               [C99] Using LL suffix.\\
MISRA-C:2004 Rule 1.1

1019   RULE001_1             [E] '@ address' is not supported in ISO C.\\
MISRA-C:2004 Rule 1.1
1019   Lang_ext              [E] '@ address' is not supported in ISO C.\\
MISRA-C:2004 Rule 1.1

1020   RULE001_1             [E] '__typeof__' is not supported in ISO C, and is treated as a language extension.\\
MISRA-C:2004 Rule 1.1
1020   Lang_ext              [E] '__typeof__' is not supported in ISO C, and is treated as a language extension.\\
MISRA-C:2004 Rule 1.1

1021   RULE001_1             [E] A statement expression is not supported in ISO C, and is treated as a language extension.\\
MISRA-C:2004 Rule 1.1
1021   Lang_ext              [E] A statement expression is not supported in ISO C, and is treated as a language extension.\\
MISRA-C:2004 Rule 1.1

1022   RULE001_1             [E] '__alignof__' is not supported in ISO C, and is treated as a language extension.\\
MISRA-C:2004 Rule 1.1
1022   Lang_ext              [E] '__alignof__' is not supported in ISO C, and is treated as a language extension.\\
MISRA-C:2004 Rule 1.1

1026   RULE001_1             [E] The indicated @word construct has been ignored.\\
MISRA-C:2004 Rule 1.1
1026   Lang_ext              [E] The indicated @word construct has been ignored.\\
MISRA-C:2004 Rule 1.1

1027   RULE001_1             [C99] Using type 'long long'.\\
MISRA-C:2004 Rule 1.1
1027   C99_ext               [C99] Using type 'long long'.\\
MISRA-C:2004 Rule 1.1

1028   RULE001_1             [E] Use of the sizeof operator in a preprocessing directive is a language extension.\\
MISRA-C:2004 Rule 1.1; REFERENCE ISO:C90-6.8.1 (Conditional Inclusion)
1028   Lang_ext              [E] Use of the sizeof operator in a preprocessing directive is a language extension.\\
MISRA-C:2004 Rule 1.1; REFERENCE ISO:C90-6.8.1 (Conditional Inclusion)

1029   RULE001_1             [E] Whitespace encountered between backslash and new-line has been ignored.\\
MISRA-C:2004 Rule 1.1; REFERENCE ISO:C90-5.1.1.2 (Translation Phases)
1029   Lang_ext              [E] Whitespace encountered between backslash and new-line has been ignored.\\
MISRA-C:2004 Rule 1.1; REFERENCE ISO:C90-5.1.1.2 (Translation Phases)

1030   RULE001_1             [C99] Macro defined with variable argument list.\\
MISRA-C:2004 Rule 1.1
1030   C99_ext               [C99] Macro defined with variable argument list.\\
MISRA-C:2004 Rule 1.1

1031   RULE001_1             [C99] Initializer for 'struct', 'union' or array type is not a constant expression.\\
MISRA-C:2004 Rule 1.1; REFERENCE ISO:C90-6.5.7 Constraints
1031   C99_ext               [C99] Initializer for 'struct', 'union' or array type is not a constant expression.\\
MISRA-C:2004 Rule 1.1; REFERENCE ISO:C90-6.5.7 Constraints

1034   RULE001_1             [E] Macro defined with named variable argument list. This is a language extension.\\
MISRA-C:2004 Rule 1.1
1034   Lang_ext              [E] Macro defined with named variable argument list. This is a language extension.\\
MISRA-C:2004 Rule 1.1

1035   RULE001_1             [E] No macro arguments supplied for variable argument list. This is a language extension.\\
MISRA-C:2004 Rule 1.1
1035   Lang_ext              [E] No macro arguments supplied for variable argument list. This is a language extension.\\
MISRA-C:2004 Rule 1.1

1036   RULE001_1             [E] Comma before ## ignored in expansion of variadic macro. This is a language extension.\\
MISRA-C:2004 Rule 1.1
1036   Lang_ext              [E] Comma before ## ignored in expansion of variadic macro. This is a language extension.\\
MISRA-C:2004 Rule 1.1

1037   RULE001_1             [E] Arrays of length zero are a language extension.\\
MISRA-C:2004 Rule 1.1
1037   Lang_ext              [E] Arrays of length zero are a language extension.\\
MISRA-C:2004 Rule 1.1

1038   RULE001_1             [E] The sequence ", ##__VA_ARGS__" is a language extension.\\
MISRA-C:2004 Rule 1.1
1038   Lang_ext              [E] The sequence ", ##__VA_ARGS__" is a language extension.\\
MISRA-C:2004 Rule 1.1

1041   RULE001_1             [E] Empty aggregate initializers are a language extension.\\
MISRA-C:2004 Rule 1.1
1041   Lang_ext              [E] Empty aggregate initializers are a language extension.\\
MISRA-C:2004 Rule 1.1

1051   RULE001_1             [C99] A variable length array has been declared.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C99-6.7.5.2 Array declarators
1051   C99_ext               [C99] A variable length array has been declared.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C99-6.7.5.2 Array declarators

1052   RULE001_1             [C99] A variable length array of unspecified size has been declared.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C99-6.7.5.2 Array declarators
1052   C99_ext               [C99] A variable length array of unspecified size has been declared.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C99-6.7.5.2 Array declarators

1053   RULE001_1             [C99] Designators have been used in this initialization list.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C99-6.7.8 Initialization
1053   C99_ext               [C99] Designators have been used in this initialization list.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C99-6.7.8 Initialization

1054   RULE001_1             [C99] A compound literal has been used.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C99-6.5.2.5 Compound literals
1054   C99_ext               [C99] A compound literal has been used.\\
MISRA-C:2004 Rule 1.1; REFERENCE - ISO:C99-6.5.2.5 Compound literals

1281   RULE010_6             Integer literal constant is of an unsigned type but does not include a "U" suffix.\\
MISRA-C:2004 Rule 10.6; REFERENCE ISO:C90-6.1.3.2 (Integer Constants)
1281   Min_Const             Integer literal constant is of an unsigned type but does not include a "U" suffix.\\
MISRA-C:2004 Rule 10.6; REFERENCE ISO:C90-6.1.3.2 (Integer Constants)

1317   RULE010_1             Value not in the enumeration type.\\
MISRA-C:2004 Rule 10.1
1317   Maj_Enum              Value not in the enumeration type.\\
MISRA-C:2004 Rule 10.1

1330   RULE016_4             The parameter identifiers in this function declaration differ from those in a previous declaration.\\
MISRA-C:2004 Rule 16.4
1330   Min_Func              The parameter identifiers in this function declaration differ from those in a previous declaration.\\
MISRA-C:2004 Rule 16.4

1331   RULE008_3             Type or number of arguments doesn't match previous use of the function.\\
MISRA-C:2004 Rule 8.3
1331   Maj_Func              Type or number of arguments doesn't match previous use of the function.\\
MISRA-C:2004 Rule 8.3

1332   RULE008_3             Type or number of arguments doesn't match prototype found later.\\
MISRA-C:2004 Rule 8.3
1332   Maj_Func              Type or number of arguments doesn't match prototype found later.\\
MISRA-C:2004 Rule 8.3

1333   RULE008_3             Type or number of arguments doesn't match function definition found later.\\
MISRA-C:2004 Rule 8.3
1333   Maj_Func              Type or number of arguments doesn't match function definition found later.\\
MISRA-C:2004 Rule 8.3

1334   RULE016_4             The parameter identifiers in the prototypes of these functions/function pointers are different.\\
MISRA-C:2004 Rule 16.4
1334   Min_Func              The parameter identifiers in the prototypes of these functions/function pointers are different.\\
MISRA-C:2004 Rule 16.4

1335   RULE016_3             Parameter identifiers missing in function prototype declaration.\\
MISRA-C:2004 Rule 16.3
1335   Min_Func              Parameter identifiers missing in function prototype declaration.\\
MISRA-C:2004 Rule 16.3

1336   RULE016_3             Parameter identifiers missing in declaration of a function type.\\
MISRA-C:2004 Rule 16.3
1336   Min_Func              Parameter identifiers missing in declaration of a function type.\\
MISRA-C:2004 Rule 16.3

1401   RULE010_1             Argument passed is constant enum not in enum type.\\
MISRA-C:2004 Rule 10.1
1401   Maj_Enum              Argument passed is constant enum not in enum type.\\
MISRA-C:2004 Rule 10.1

1402   RULE010_1             Assignment of constant enum not in enum type.\\
MISRA-C:2004 Rule 10.1
1402   Maj_Enum              Assignment of constant enum not in enum type.\\
MISRA-C:2004 Rule 10.1

1403   RULE010_1             Return of constant enum not in enum type.\\
MISRA-C:2004 Rule 10.1
1403   Maj_Enum              Return of constant enum not in enum type.\\
MISRA-C:2004 Rule 10.1

1411   RULE010_1             Argument passed is a numeric constant but an enum is expected.\\
MISRA-C:2004 Rule 10.1
1411   Maj_Enum              Argument passed is a numeric constant but an enum is expected.\\
MISRA-C:2004 Rule 10.1

1412   RULE010_1             Constant expression assigned to an enum.\\
MISRA-C:2004 Rule 10.1
1412   Maj_Enum              Constant expression assigned to an enum.\\
MISRA-C:2004 Rule 10.1

1413   RULE010_1             Return of numeric constant when enum expected.\\
MISRA-C:2004 Rule 10.1
1413   Maj_Enum              Return of numeric constant when enum expected.\\
MISRA-C:2004 Rule 10.1

1421   RULE010_1             Argument passed is enum object of different type.\\
MISRA-C:2004 Rule 10.1
1421   Maj_Enum              Argument passed is enum object of different type.\\
MISRA-C:2004 Rule 10.1

1422   RULE010_1             Assignment of enum object of different type.\\
MISRA-C:2004 Rule 10.1
1422   Maj_Enum              Assignment of enum object of different type.\\
MISRA-C:2004 Rule 10.1

1423   RULE010_1             Return of enum object of different type.\\
MISRA-C:2004 Rule 10.1
1423   Maj_Enum              Return of enum object of different type.\\
MISRA-C:2004 Rule 10.1

1431   RULE010_1             Argument passed is enum when non enum type expected.\\
MISRA-C:2004 Rule 10.1
1431   Min_Enum              Argument passed is enum when non enum type expected.\\
MISRA-C:2004 Rule 10.1

1433   RULE010_1             Return of enum to non enum type.\\
MISRA-C:2004 Rule 10.1
1433   Min_Enum              Return of enum to non enum type.\\
MISRA-C:2004 Rule 10.1

1441   RULE010_1             Argument passed is non enum type when enum expected, and may be out of range.\\
MISRA-C:2004 Rule 10.1
1441   Maj_Enum              Argument passed is non enum type when enum expected, and may be out of range.\\
MISRA-C:2004 Rule 10.1

1442   RULE010_1             Expression assigned to an enum.\\
MISRA-C:2004 Rule 10.1
1442   Maj_Enum              Expression assigned to an enum.\\
MISRA-C:2004 Rule 10.1

1443   RULE010_1             Return of non enum type to enum, and may be out of range.\\
MISRA-C:2004 Rule 10.1
1443   Maj_Enum              Return of non enum type to enum, and may be out of range.\\
MISRA-C:2004 Rule 10.1

1460   RULE014_1             Switch label value, %s, not contained in enum type.\\
MISRA-C:2004 Rule 14.1
1460   Min_Switch            Switch label value, %s, not contained in enum type.\\
MISRA-C:2004 Rule 14.1

1503   RULE014_1             The function '%1s' is defined but is not used within this project.\\
MISRA-C:2004 Rule 14.1
1503   CMA_declaration       The function '%1s' is defined but is not used within this project.\\
MISRA-C:2004 Rule 14.1

1504   RULE08_10             The object '%1s' is only referenced in the translation unit where it is defined.\\
MISRA-C:2004 Rule 8.10
1504   CMA_maintenance       The object '%1s' is only referenced in the translation unit where it is defined.\\
MISRA-C:2004 Rule 8.10

1505   RULE08_10             The function '%1s' is only referenced in the translation unit where it is defined.\\
MISRA-C:2004 Rule 8.10
1505   CMA_maintenance       The function '%1s' is only referenced in the translation unit where it is defined.\\
MISRA-C:2004 Rule 8.10

1506   RULE005_3             The identifier '%1s' is declared as a typedef and is used elsewhere for a different kind of declaration.\\
MISRA-C:2004 Rule 5.3
1506   CMA_maintenance       The identifier '%1s' is declared as a typedef and is used elsewhere for a different kind of declaration.\\
MISRA-C:2004 Rule 5.3

1507   RULE005_3             '%1s' is used as a typedef for different types.\\
MISRA-C:2004 Rule 5.3
1507   CMA_maintenance       '%1s' is used as a typedef for different types.\\
MISRA-C:2004 Rule 5.3

1508   RULE005_3             The typedef '%1s' is declared in more than one location.\\
MISRA-C:2004 Rule 5.3
1508   CMA_maintenance       The typedef '%1s' is declared in more than one location.\\
MISRA-C:2004 Rule 5.3

1509   RULE008_9             '%1s' has external linkage and has multiple definitions.\\
MISRA-C:2004 Rule 8.9
1509   CMA_warning           '%1s' has external linkage and has multiple definitions.\\
MISRA-C:2004 Rule 8.9

1510   RULE008_4             '%1s' has external linkage and has incompatible declarations.\\
MISRA-C:2004 Rule 8.4
1510   CMA_warning           '%1s' has external linkage and has incompatible declarations.\\
MISRA-C:2004 Rule 8.4

1513   RULE008_8             Identifier '%1s' with external linkage has separate non-defining declarations in more than one location.\\
MISRA-C:2004 Rule 8.8
1513   CMA_maintenance       Identifier '%1s' with external linkage has separate non-defining declarations in more than one location.\\
MISRA-C:2004 Rule 8.8

1514   RULE008_7             The object '%1s' is only referenced by function '%2s', in the translation unit where it is defined\\
MISRA-C:2004 Rule 8.7
1514   CMA_maintenance       The object '%1s' is only referenced by function '%2s', in the translation unit where it is defined\\
MISRA-C:2004 Rule 8.7

1520   RULE016_2             Functions are indirectly recursive.\\
MISRA-C:2004 Rule 16.2
1520   CMA_maintenance       Functions are indirectly recursive.\\
MISRA-C:2004 Rule 16.2

1525   RULE005_5             Object/function with external linkage has same identifier as another object/function with internal linkage.\\
MISRA-C:2004 Rule 5.5
1525   CMA_maintenance       Object/function with external linkage has same identifier as another object/function with internal linkage.\\
MISRA-C:2004 Rule 5.5

1526   RULE005_5             Object with no linkage has same identifier as another object/function with external linkage.\\
MISRA-C:2004 Rule 5.5
1526   CMA_maintenance       Object with no linkage has same identifier as another object/function with external linkage.\\
MISRA-C:2004 Rule 5.5

1527   RULE005_5             Object/function with internal linkage has same identifier as another object/function with internal linkage.\\
MISRA-C:2004 Rule 5.5
1527   CMA_maintenance       Object/function with internal linkage has same identifier as another object/function with internal linkage.\\
MISRA-C:2004 Rule 5.5

1528   RULE005_5             Object with no linkage has same identifier as another object/function with internal linkage.\\
MISRA-C:2004 Rule 5.5
1528   CMA_maintenance       Object with no linkage has same identifier as another object/function with internal linkage.\\
MISRA-C:2004 Rule 5.5

1529   RULE005_5             Object with no linkage has same identifier as another object with static storage duration but no linkage.\\
MISRA-C:2004 Rule 5.5
1529   CMA_maintenance       Object with no linkage has same identifier as another object with static storage duration but no linkage.\\
MISRA-C:2004 Rule 5.5

2001   RULE014_4             A 'goto' statement has been used.\\
MISRA-C:2004 Rule 14.4
2001   Min_Ctrl              A 'goto' statement has been used.\\
MISRA-C:2004 Rule 14.4

2002   RULE015_3             No 'default' case found in this 'switch' statement.\\
MISRA-C:2004 Rule 15.3
2002   Min_Switch            No 'default' case found in this 'switch' statement.\\
MISRA-C:2004 Rule 15.3

2003   RULE015_2             The preceding non-empty 'case' or 'default' clause does not end with an explicit 'break' or 'return' statement.\\
MISRA-C:2004 Rule 15.2
2003   Min_Switch            The preceding non-empty 'case' or 'default' clause does not end with an explicit 'break' or 'return' statement.\\
MISRA-C:2004 Rule 15.2

2004   RULE14_10             No concluding 'else' exists in this 'if'-'else'-'if' statement.\\
MISRA-C:2004 Rule 14.10
2004   Min_Ctrl              No concluding 'else' exists in this 'if'-'else'-'if' statement.\\
MISRA-C:2004 Rule 14.10

2006   RULE014_7             '%s()' has more than one 'return' path.\\
MISRA-C:2004 Rule 14.7
2006   Min_Func              '%s()' has more than one 'return' path.\\
MISRA-C:2004 Rule 14.7

2008   RULE014_1             Code statements precede the first label in this switch construct.\\
MISRA-C:2004 Rule 14.1; REFERENCE - ISO:C90-6.6.4.2 Semantics
2008   Maj_Redun             Code statements precede the first label in this switch construct.\\
MISRA-C:2004 Rule 14.1; REFERENCE - ISO:C90-6.6.4.2 Semantics

2009   RULE015_3             This default label is not the final case label within the switch block.\\
MISRA-C:2004 Rule 15.3
2009   Min_Switch            This default label is not the final case label within the switch block.\\
MISRA-C:2004 Rule 15.3

2019   RULE015_1             Switch label is located within a nested code block.\\
MISRA-C:2004 Rule 15.1
2019   Min_Switch            Switch label is located within a nested code block.\\
MISRA-C:2004 Rule 15.1

2020   RULE015_2             Final switch clause does not end with an explicit 'break' statement.\\
MISRA-C:2004 Rule 15.2
2020   Min_Switch            Final switch clause does not end with an explicit 'break' statement.\\
MISRA-C:2004 Rule 15.2

2050   RULE008_2             The 'int' type specifier has been omitted from a function declaration.\\
MISRA-C:2004 Rule 8.2
2050   Min_Decl              The 'int' type specifier has been omitted from a function declaration.\\
MISRA-C:2004 Rule 8.2

2051   RULE008_2             The 'int' type specifier has been omitted from an object declaration.\\
MISRA-C:2004 Rule 8.2
2051   Min_Decl              The 'int' type specifier has been omitted from an object declaration.\\
MISRA-C:2004 Rule 8.2

2212   RULE014_8             Body of control statement is not enclosed within braces.\\
MISRA-C:2004 Rules 14.8, 14.9
2212   RULE014_9             Body of control statement is not enclosed within braces.\\
MISRA-C:2004 Rules 14.8, 14.9
2212   Min_Brace             Body of control statement is not enclosed within braces.\\
MISRA-C:2004 Rules 14.8, 14.9

2214   RULE014_8             Body of control statement is on the same line and is not enclosed within braces.\\
MISRA-C:2004 Rules 14.8, 14.9
2214   RULE014_9             Body of control statement is on the same line and is not enclosed within braces.\\
MISRA-C:2004 Rules 14.8, 14.9
2214   Min_Brace             Body of control statement is on the same line and is not enclosed within braces.\\
MISRA-C:2004 Rules 14.8, 14.9

2462   RULE013_5             Control variable, %s, is not initialized in this for loop expression.\\
MISRA-C:2004 Rule 13.5
2462   Min_Ctrl              Control variable, %s, is not initialized in this for loop expression.\\
MISRA-C:2004 Rule 13.5

2463   RULE013_5             Control variable, %s, does not appear in the increment expression.\\
MISRA-C:2004 Rule 13.5
2463   Min_Ctrl              Control variable, %s, does not appear in the increment expression.\\
MISRA-C:2004 Rule 13.5

2469   RULE013_6             Control variable, %s, modified in body of loop.\\
MISRA-C:2004 Rule 13.6
2469   Min_Ctrl              Control variable, %s, modified in body of loop.\\
MISRA-C:2004 Rule 13.6

2547   RULE005_2             Use of tag '%s' hides more global declaration.\\
MISRA-C:2004 Rule 5.2
2547   Maj_Decl              Use of tag '%s' hides more global declaration.\\
MISRA-C:2004 Rule 5.2

3001   RULE016_5             Function has been declared with an empty parameter list.\\
MISRA-C:2004 Rule 16.5; REFERENCE - ISO:C90-6.9.4 Future Language Directions
3001   Min_Func              Function has been declared with an empty parameter list.\\
MISRA-C:2004 Rule 16.5; REFERENCE - ISO:C90-6.9.4 Future Language Directions

3002   RULE008_1             Defining '%s()' with an identifier list and separate parameter declarations is an obsolescent feature.\\
MISRA-C:2004 Rule 8.1; REFERENCE - ISO:C90-6.9.5 Future Language Directions
3002   Maj_Func              Defining '%s()' with an identifier list and separate parameter declarations is an obsolescent feature.\\
MISRA-C:2004 Rule 8.1; REFERENCE - ISO:C90-6.9.5 Future Language Directions

3006   RULE002_1             This function contains a mixture of in-line assembler statements and C statements.\\
MISRA-C:2004 Rule 2.1
3006   Min_Func              This function contains a mixture of in-line assembler statements and C statements.\\
MISRA-C:2004 Rule 2.1

3007   RULE016_5             "void" has been omitted when defining a function with no parameters.\\
MISRA-C:2004 Rule 16.5; REFERENCE - ISO:C90-6.7.1 Constraints
3007   Min_Func              "void" has been omitted when defining a function with no parameters.\\
MISRA-C:2004 Rule 16.5; REFERENCE - ISO:C90-6.7.1 Constraints

3101   RULE012_9             Unary '-' applied to an operand of type unsigned int or unsigned long gives an unsigned result.\\
MISRA-C:2004 Rule 12.9; REFERENCE - ISO:C90-6.3.3.3 Semantics
3101   Maj_Ops               Unary '-' applied to an operand of type unsigned int or unsigned long gives an unsigned result.\\
MISRA-C:2004 Rule 12.9; REFERENCE - ISO:C90-6.3.3.3 Semantics

3102   RULE012_9             Unary '-' applied to an operand whose underlying type is unsigned.\\
MISRA-C:2004 Rule 12.9; REFERENCE - ISO:C90-6.3.3.3 Semantics
3102   Maj_Ops               Unary '-' applied to an operand whose underlying type is unsigned.\\
MISRA-C:2004 Rule 12.9; REFERENCE - ISO:C90-6.3.3.3 Semantics

3108   RULE002_3             Nested comments are not recognized in the ISO standard.\\
MISRA-C:2004 Rule 2.3; REFERENCE - ISO:C90-6.1.9 Comments (footnote 26)
3108   Min_Prepro            Nested comments are not recognized in the ISO standard.\\
MISRA-C:2004 Rule 2.3; REFERENCE - ISO:C90-6.1.9 Comments (footnote 26)

3110   RULE014_2             The left-hand operand of this ',' has no side-effects.\\
MISRA-C:2004 Rule 14.2; REFERENCE ISO:C90-6.6.3
3110   Maj_Redun             The left-hand operand of this ',' has no side-effects.\\
MISRA-C:2004 Rule 14.2; REFERENCE ISO:C90-6.6.3

3112   RULE014_2             This statement has no side-effect - it can be removed.\\
MISRA-C:2004 Rule 14.2
3112   Maj_Redun             This statement has no side-effect - it can be removed.\\
MISRA-C:2004 Rule 14.2

3113   RULE016_8             [U] 'return' statement includes no expression but function '%s()' is implicitly of type 'int'.\\
MISRA-C:2004 Rule 16.8; REFERENCE ISO:C90-6.6.6.4
3113   ISO_ExpU              [U] 'return' statement includes no expression but function '%s()' is implicitly of type 'int'.\\
MISRA-C:2004 Rule 16.8; REFERENCE ISO:C90-6.6.6.4

3114   RULE016_8             [U] Function '%s()' is implicitly of type 'int' but ends without returning a value.\\
MISRA-C:2004 Rule 16.8
3114   ISO_ExpU              [U] Function '%s()' is implicitly of type 'int' but ends without returning a value.\\
MISRA-C:2004 Rule 16.8

3115   RULE19_16             Unrecognized preprocessing directive - ignored because it occurs in a FALSE arm of a '#if' group.\\
MISRA-C:2004 Rule 19.16
3115   Min_Prepro            Unrecognized preprocessing directive - ignored because it occurs in a FALSE arm of a '#if' group.\\
MISRA-C:2004 Rule 19.16

3116   RULE003_4             Unrecognized #pragma arguments '%s' This #pragma directive has been ignored.\\
MISRA-C:2004 Rule 3.4
3116   Min_Prepro            Unrecognized #pragma arguments '%s' This #pragma directive has been ignored.\\
MISRA-C:2004 Rule 3.4

3138   RULE014_3             Null statement is located close to other code or comments.\\
MISRA-C:2004 Rule 14.3
3138   Min_Stmt              Null statement is located close to other code or comments.\\
MISRA-C:2004 Rule 14.3

3200   RULE16_10             '%s' returns a value which is not being used.\\
MISRA-C:2004 Rule 16.10
3200   Min_Func              '%s' returns a value which is not being used.\\
MISRA-C:2004 Rule 16.10

3201   RULE014_1             This statement is unreachable.\\
MISRA-C:2004 Rule 14.1
3201   Maj_Redun             This statement is unreachable.\\
MISRA-C:2004 Rule 14.1

3217   RULE017_6             Address of automatic data assigned to pointer with linkage or wider scope.\\
MISRA-C:2004 Rule 17.6; REFERENCE - ISO:C90-6.1.2.4
3217   Maj_Ops               Address of automatic data assigned to pointer with linkage or wider scope.\\
MISRA-C:2004 Rule 17.6; REFERENCE - ISO:C90-6.1.2.4

3218   RULE008_7             File scope static, '%s', is only accessed in one function.\\
MISRA-C:2004 Rule 8.7
3218   Min_Decl              File scope static, '%s', is only accessed in one function.\\
MISRA-C:2004 Rule 8.7

3219   RULE014_1             Static function '%s()' is not used within this translation unit.\\
MISRA-C:2004 Rule 14.1
3219   Maj_Redun             Static function '%s()' is not used within this translation unit.\\
MISRA-C:2004 Rule 14.1

3221   RULE008_6             Function declared at block scope.\\
MISRA-C:2004 Rule 8.6
3221   Min_Decl              Function declared at block scope.\\
MISRA-C:2004 Rule 8.6

3222   RULE008_8             Object with linkage declared at block scope.\\
MISRA-C:2004 Rule 8.8
3222   Min_Decl              Object with linkage declared at block scope.\\
MISRA-C:2004 Rule 8.8

3224   RULE08_11             This identifier has previously been declared with internal linkage but is not declared here with the static storage class specifier.\\
MISRA-C:2004 Rule 8.11
3224   Min_Decl              This identifier has previously been declared with internal linkage but is not declared here with the static storage class specifier.\\
MISRA-C:2004 Rule 8.11

3225   RULE017_6             Function parameter returns address of automatic data.\\
MISRA-C:2004 Rule 17.6
3225   Maj_Ops               Function parameter returns address of automatic data.\\
MISRA-C:2004 Rule 17.6

3230   RULE017_6             Address of automatic data assigned to local pointer with static storage duration.\\
MISRA-C:2004 Rule 17.6
3230   Maj_Ops               Address of automatic data assigned to local pointer with static storage duration.\\
MISRA-C:2004 Rule 17.6

3234   RULE015_0             Declarations precede the first label in this switch construct.\\
MISRA-C:2004 Rule 15.0
3234   Min_Switch            Declarations precede the first label in this switch construct.\\
MISRA-C:2004 Rule 15.0

3302   RULE12_11             Unsigned subtraction in constant expression wraps around past zero.\\
MISRA-C:2004 Rule 12.11; REFERENCE ISO:C90-6.3.7
3302   Min_Const             Unsigned subtraction in constant expression wraps around past zero.\\
MISRA-C:2004 Rule 12.11; REFERENCE ISO:C90-6.3.7

3303   RULE12_11             Unsigned addition in constant expression wraps around past maximum value.\\
MISRA-C:2004 Rule 12.11; REFERENCE ISO:C90-6.4
3303   Min_Const             Unsigned addition in constant expression wraps around past maximum value.\\
MISRA-C:2004 Rule 12.11; REFERENCE ISO:C90-6.4

3304   RULE12_11             Unsigned multiplication in constant expression wraps around past maximum value.\\
MISRA-C:2004 Rule 12.11; REFERENCE ISO:C90-6.4
3304   Min_Const             Unsigned multiplication in constant expression wraps around past maximum value.\\
MISRA-C:2004 Rule 12.11; REFERENCE ISO:C90-6.4

3306   RULE010_1             This implicit conversion of a non-negative constant integer value to an unsigned type will result in truncation.\\
MISRA-C:2004 Rule 10.1; REFERENCE ISO:C90-6.2.1.2
3306   Maj_Ops               This implicit conversion of a non-negative constant integer value to an unsigned type will result in truncation.\\
MISRA-C:2004 Rule 10.1; REFERENCE ISO:C90-6.2.1.2

3307   RULE012_3             The operand of 'sizeof' is an expression with implied side-effects, but they will not be evaluated.\\
MISRA-C:2004 Rule 12.3; REFERENCE - ISO:C90-6.3.3.4 Semantics of sizeof
3307   Maj_Redun             The operand of 'sizeof' is an expression with implied side-effects, but they will not be evaluated.\\
MISRA-C:2004 Rule 12.3; REFERENCE - ISO:C90-6.3.3.4 Semantics of sizeof

3311   RULE001_2             [u] Jump to label '%s' from outside this block. Local initialization will not be performed.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.1.2.4
3311   ISO_ImpU              [u] Jump to label '%s' from outside this block. Local initialization will not be performed.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.1.2.4

3312   RULE001_2             [u] The label '%s' is in a block with local initialization which will not be performed.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.1.2.4
3312   ISO_ImpU              [u] The label '%s' is in a block with local initialization which will not be performed.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.1.2.4

3313   RULE018_1             No definition has been found for structure/union tag '%s'.\\
MISRA-C:2004 Rule 18.1; REFERENCE ISO:C90-6.5.2.3
3313   Maj_Decl              No definition has been found for structure/union tag '%s'.\\
MISRA-C:2004 Rule 18.1; REFERENCE ISO:C90-6.5.2.3

3315   RULE015_5             This 'switch' statement contains only a single path - it is redundant.\\
MISRA-C:2004 Rule 15.5; REFERENCE ISO:C90-6.6.4.2
3315   Min_Switch            This 'switch' statement contains only a single path - it is redundant.\\
MISRA-C:2004 Rule 15.5; REFERENCE ISO:C90-6.6.4.2

3317   RULE19_17             '#if...' not matched by '#endif' in included file. This is probably an error.\\
MISRA-C:2004 Rule 19.17
3317   Maj_Prepro            '#if...' not matched by '#endif' in included file. This is probably an error.\\
MISRA-C:2004 Rule 19.17

3318   RULE19_17             '#else'/'#elif'/'#endif' in included file matched '#if...' in parent file. This is probably an error.\\
MISRA-C:2004 Rule 19.17
3318   Maj_Prepro            '#else'/'#elif'/'#endif' in included file matched '#if...' in parent file. This is probably an error.\\
MISRA-C:2004 Rule 19.17

3319   RULE016_6             [U] Function called with number of arguments which differs from number of arguments of definition.\\
MISRA-C:2004 Rule 16.6; REFERENCE ISO:C90-6.3.2.2
3319   ISO_ExpU              [U] Function called with number of arguments which differs from number of arguments of definition.\\
MISRA-C:2004 Rule 16.6; REFERENCE ISO:C90-6.3.2.2

3320   RULE008_3             Type of argument no. %s differs from its type in definition of function.\\
MISRA-C:2004 Rule 8.3; REFERENCE ISO:C90-6.3.2.2
3320   Maj_Func              Type of argument no. %s differs from its type in definition of function.\\
MISRA-C:2004 Rule 8.3; REFERENCE ISO:C90-6.3.2.2

3321   RULE009_1             [U] The variable '%s' is definitely unset at this point.\\
MISRA-C:2004 Rule 9.1; REFERENCE ISO:C90-6.5.7
3321   ISO_ExpU              [U] The variable '%s' is definitely unset at this point.\\
MISRA-C:2004 Rule 9.1; REFERENCE ISO:C90-6.5.7

3325   RULE014_1             This control expression has a constant 'false' value.\\
MISRA-C:2004 Rule 14.1
3325   Min_Ctrl              This control expression has a constant 'false' value.\\
MISRA-C:2004 Rule 14.1

3326   RULE013_1             An assignment operator is being used in a boolean expression.\\
MISRA-C:2004 Rule 13.1
3326   Min_Stmt              An assignment operator is being used in a boolean expression.\\
MISRA-C:2004 Rule 13.1

3332   RULE19_11             The macro '%s' used in this '#if...' test is not defined.\\
MISRA-C:2004 Rule 19.11
3332   Maj_Prepro            The macro '%s' used in this '#if...' test is not defined.\\
MISRA-C:2004 Rule 19.11

3334   RULE005_2             This declaration of '%s' hides a more global declaration.\\
MISRA-C:2004 Rule 5.2
3334   Maj_Decl              This declaration of '%s' hides a more global declaration.\\
MISRA-C:2004 Rule 5.2

3335   RULE008_1             No function declaration. Implicit declaration inserted: 'extern int %s();'.\\
MISRA-C:2004 Rule 8.1; REFERENCE - ISO:C90-6.3.2.2 Semantics of Function Calls
3335   Maj_Func              No function declaration. Implicit declaration inserted: 'extern int %s();'.\\
MISRA-C:2004 Rule 8.1; REFERENCE - ISO:C90-6.3.2.2 Semantics of Function Calls

3340   RULE013_4             Floating point variable used as 'for' loop index.\\
MISRA-C:2004 Rule 13.4
3340   Min_Ctrl              Floating point variable used as 'for' loop index.\\
MISRA-C:2004 Rule 13.4

3341   RULE013_3             Comparing floating point expressions for equality (with '==' or '!=').\\
MISRA-C:2004 Rule 13.3
3341   Maj_Ops               Comparing floating point expressions for equality (with '==' or '!=').\\
MISRA-C:2004 Rule 13.3

3342   RULE013_4             Control expression of 'for' loop is a floating point comparison.\\
MISRA-C:2004 Rule 13.4
3342   Min_Ctrl              Control expression of 'for' loop is a floating point comparison.\\
MISRA-C:2004 Rule 13.4

3344   RULE013_2             Value of control expression is not derived from an explicit logical operation.\\
MISRA-C:2004 Rule 13.2
3344   Min_Stmt              Value of control expression is not derived from an explicit logical operation.\\
MISRA-C:2004 Rule 13.2

3347   RULE009_1             [U] The variable '%s' is apparently unset at this point.\\
MISRA-C:2004 Rule 9.1; REFERENCE ISO:C90-6.5.7
3347   ISO_ExpU              [U] The variable '%s' is apparently unset at this point.\\
MISRA-C:2004 Rule 9.1; REFERENCE ISO:C90-6.5.7

3348   RULE009_1             This function argument points to data that is definitely unset.\\
MISRA-C:2004 Rule 9.1; REFERENCE ISO:C90-6.5.7
3348   Maj_Stmt              This function argument points to data that is definitely unset.\\
MISRA-C:2004 Rule 9.1; REFERENCE ISO:C90-6.5.7

3349   RULE009_1             This function argument points to data that is apparently unset.\\
MISRA-C:2004 Rule 9.1; REFERENCE ISO:C90-6.5.7
3349   Maj_Stmt              This function argument points to data that is apparently unset.\\
MISRA-C:2004 Rule 9.1; REFERENCE ISO:C90-6.5.7

3353   RULE009_1             The variable '%s' is possibly unset at this point.\\
MISRA-C:2004 Rule 9.1
3353   Min_Ctrl              The variable '%s' is possibly unset at this point.\\
MISRA-C:2004 Rule 9.1

3354   RULE009_1             This function argument points to data that is possibly unset.\\
MISRA-C:2004 Rule 9.1
3354   Min_Ctrl              This function argument points to data that is possibly unset.\\
MISRA-C:2004 Rule 9.1

3355   RULE013_7             The result of this logical operation is always 'true'.\\
MISRA-C:2004 Rule 13.7
3355   Maj_Redun             The result of this logical operation is always 'true'.\\
MISRA-C:2004 Rule 13.7

3356   RULE013_7             The result of this logical operation is always 'false'.\\
MISRA-C:2004 Rule 13.7
3356   Maj_Redun             The result of this logical operation is always 'false'.\\
MISRA-C:2004 Rule 13.7

3357   RULE013_7             The value of this loop control expression is always 'true'.\\
MISRA-C:2004 Rule 13.7
3357   Maj_Redun             The value of this loop control expression is always 'true'.\\
MISRA-C:2004 Rule 13.7

3358   RULE013_7             The value of this 'if' control expression is always 'true'.\\
MISRA-C:2004 Rule 13.7
3358   Maj_Redun             The value of this 'if' control expression is always 'true'.\\
MISRA-C:2004 Rule 13.7

3359   RULE013_7             The value of this control expression is always 'false'.\\
MISRA-C:2004 Rule 13.7
3359   Maj_Redun             The value of this control expression is always 'false'.\\
MISRA-C:2004 Rule 13.7

3360   RULE013_7             The value of this 'do - while' control expression is always 'false'. The loop will only be executed once.\\
MISRA-C:2004 Rule 13.7
3360   Maj_Redun             The value of this 'do - while' control expression is always 'false'. The loop will only be executed once.\\
MISRA-C:2004 Rule 13.7

3372   RULE021_1             Unsigned arithmetic definitely results in wraparound past zero.\\
MISRA-C:2004 Rule 21.1
3372   Maj_Ops               Unsigned arithmetic definitely results in wraparound past zero.\\
MISRA-C:2004 Rule 21.1

3382   RULE021_1             Unsigned arithmetic apparently results in wraparound past zero.\\
MISRA-C:2004 Rule 21.1
3382   Maj_Ops               Unsigned arithmetic apparently results in wraparound past zero.\\
MISRA-C:2004 Rule 21.1

3389   RULE012_1             Operator in the set + - * / % used with % operator. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.1
3389   Min_Stmt              Operator in the set + - * / % used with % operator. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.1

3391   RULE012_1             Ternary operator used more than once. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.1
3391   Min_Stmt              Ternary operator used more than once. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.1

3392   RULE012_1             A shift, relational or equality operator has been used more than once. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.1
3392   Min_Stmt              A shift, relational or equality operator has been used more than once. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.1

3393   RULE012_1             Different binary operators in the set + - * / with the same precedence have been used. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.1
3393   Min_Stmt              Different binary operators in the set + - * / with the same precedence have been used. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.1

3394   RULE012_1             Binary operator other than + - * / % used with different binary operator of the same precedence. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.1
3394   Min_Stmt              Binary operator other than + - * / % used with different binary operator of the same precedence. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.1

3395   RULE012_1             Operators in the set + - * / with different precedence have been used. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.1
3395   Min_Stmt              Operators in the set + - * / with different precedence have been used. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.1

3396   RULE012_1             Ternary operator used with another binary operator. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.1
3396   Min_Stmt              Ternary operator used with another binary operator. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.1

3397   RULE012_1             Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.1
3397   Min_Stmt              Binary operator other than + - * / % used with binary operator of different precedence. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.1

3398   RULE012_5             Operator in set () [] -> . used with && or ||. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.5
3398   Min_Stmt              Operator in set () [] -> . used with && or ||. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.5

3399   RULE012_5             Unary operator used with && or ||. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.5
3399   Min_Stmt              Unary operator used with && or ||. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.5

3400   RULE012_5             Binary/ternary operator used with && or ||. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.5
3400   Min_Stmt              Binary/ternary operator used with && or ||. Extra parentheses recommended.\\
MISRA-C:2004 Rule 12.5

3402   RULE014_9             Braces are needed to clarify the structure of this 'if'-'if'-'else' statement.\\
MISRA-C:2004 Rule 14.9
3402   Min_Brace             Braces are needed to clarify the structure of this 'if'-'if'-'else' statement.\\
MISRA-C:2004 Rule 14.9

3406   RULE008_5             Object/function '%s', with external linkage, has been defined in a header file.\\
MISRA-C:2004 Rule 8.5
3406   Maj_Decl              Object/function '%s', with external linkage, has been defined in a header file.\\
MISRA-C:2004 Rule 8.5

3408   RULE008_8             '%s' has external linkage but is being defined without any previous declaration.\\
MISRA-C:2004 Rule 8.8
3408   Min_Decl              '%s' has external linkage but is being defined without any previous declaration.\\
MISRA-C:2004 Rule 8.8

3410   RULE19_10             Macro parameter not enclosed in ().\\
MISRA-C:2004 Rule 19.10
3410   Min_Prepro            Macro parameter not enclosed in ().\\
MISRA-C:2004 Rule 19.10

3411   RULE019_4             Macro defined with unbalanced brackets, parentheses or braces.\\
MISRA-C:2004 Rule 19.4
3411   Min_Prepro            Macro defined with unbalanced brackets, parentheses or braces.\\
MISRA-C:2004 Rule 19.4

3412   RULE019_4             Macro defines an unrecognized code-fragment.\\
MISRA-C:2004 Rule 19.4
3412   Min_Prepro            Macro defines an unrecognized code-fragment.\\
MISRA-C:2004 Rule 19.4

3413   RULE019_4             Macro definition could be replaced by a typedef.\\
MISRA-C:2004 Rule 19.4; REFERENCE ISO:C90-6.5.6
3413   Min_Prepro            Macro definition could be replaced by a typedef.\\
MISRA-C:2004 Rule 19.4; REFERENCE ISO:C90-6.5.6

3415   RULE012_4             The right hand operand of '&&' or '||' has side effects.\\
MISRA-C:2004 Rule 12.4
3415   Min_Stmt              The right hand operand of '&&' or '||' has side effects.\\
MISRA-C:2004 Rule 12.4

3417   RULE12_10             The comma operator has been used outside a for-loop header.\\
MISRA-C:2004 Rule 12.10
3417   Min_Ops               The comma operator has been used outside a for-loop header.\\
MISRA-C:2004 Rule 12.10

3418   RULE12_10             The comma operator has been used in a for-loop header.\\
MISRA-C:2004 Rule 12.10
3418   Min_Ops               The comma operator has been used in a for-loop header.\\
MISRA-C:2004 Rule 12.10

3425   RULE014_2             One side of ':' expression has no side effect.\\
MISRA-C:2004 Rule 14.2
3425   Maj_Redun             One side of ':' expression has no side effect.\\
MISRA-C:2004 Rule 14.2

3426   RULE014_2             Right hand side of comma expression has no side effect and its value is not used.\\
MISRA-C:2004 Rule 14.2
3426   Maj_Redun             Right hand side of comma expression has no side effect and its value is not used.\\
MISRA-C:2004 Rule 14.2

3427   RULE014_2             Right hand side of logical operator has no side effect.\\
MISRA-C:2004 Rule 14.2
3427   Maj_Redun             Right hand side of logical operator has no side effect.\\
MISRA-C:2004 Rule 14.2

3431   RULE019_4             Macro defines a control statement keyword, operator or punctuator\\
MISRA-C:2004 Rule 19.4
3431   Min_Prepro            Macro defines a control statement keyword, operator or punctuator\\
MISRA-C:2004 Rule 19.4

3437   RULE001_2             [u] The assert macro has been suppressed to call a function of that name, undefined behaviour.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.2 Diagnostics <assert.h>
3437   ISO_ImpU              [u] The assert macro has been suppressed to call a function of that name, undefined behaviour.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.2 Diagnostics <assert.h>

3438   RULE001_2             [U] #undef'ing the assert macro to call a function of that name causes undefined behaviour.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.2 Diagnostics <assert.h>
3438   ISO_ExpU              [U] #undef'ing the assert macro to call a function of that name causes undefined behaviour.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-7.2 Diagnostics <assert.h>

3439   RULE020_1             Macro redefines a keyword.\\
MISRA-C:2004 Rule 20.1
3439   Min_Prepro            Macro redefines a keyword.\\
MISRA-C:2004 Rule 20.1

3440   RULE12_13             Result of ++ or -- operator used in expression.\\
MISRA-C:2004 Rule 12.13
3440   Min_Ops               Result of ++ or -- operator used in expression.\\
MISRA-C:2004 Rule 12.13

3447   RULE008_8             '%s' has external linkage but this declaration is not in a header file.\\
MISRA-C:2004 Rule 8.8
3447   Min_Decl              '%s' has external linkage but this declaration is not in a header file.\\
MISRA-C:2004 Rule 8.8

3448   RULE005_3             Declaration of typedef '%s' is not in a header file although it is used in a definition or declaration with external linkage.\\
MISRA-C:2004 Rule 5.3
3448   Min_Decl              Declaration of typedef '%s' is not in a header file although it is used in a definition or declaration with external linkage.\\
MISRA-C:2004 Rule 5.3

3450   RULE008_1             Function '%s', with internal linkage, is being defined without a previous declaration.\\
MISRA-C:2004 Rule 8.1
3450   Min_Decl              Function '%s', with internal linkage, is being defined without a previous declaration.\\
MISRA-C:2004 Rule 8.1

3451   RULE008_8             The global identifier '%s' has been declared in more than one file.\\
MISRA-C:2004 Rule 8.8
3451   Min_Decl              The global identifier '%s' has been declared in more than one file.\\
MISRA-C:2004 Rule 8.8

3453   RULE019_7             A function could probably be used instead of this function-like macro.\\
MISRA-C:2004 Rule 19.7
3453   Min_Prepro            A function could probably be used instead of this function-like macro.\\
MISRA-C:2004 Rule 19.7

3458   RULE019_4             Macro defines a braced code statement block.\\
MISRA-C:2004 Rule 19.4
3458   Min_Prepro            Macro defines a braced code statement block.\\
MISRA-C:2004 Rule 19.4

3460   RULE019_4             Macro defines a type specifier keyword.\\
MISRA-C:2004 Rule 19.4
3460   Min_Prepro            Macro defines a type specifier keyword.\\
MISRA-C:2004 Rule 19.4

3461   RULE019_4             Macro defines a storage-class specifier/type qualifier sequence.\\
MISRA-C:2004 Rule 19.4
3461   Min_Prepro            Macro defines a storage-class specifier/type qualifier sequence.\\
MISRA-C:2004 Rule 19.4

3480   RULE008_5             Object/function '%s', with internal linkage, has been defined in a header file.\\
MISRA-C:2004 Rule 8.5
3480   Maj_Decl              Object/function '%s', with internal linkage, has been defined in a header file.\\
MISRA-C:2004 Rule 8.5

3601   RULE004_2             Trigraphs (??x) are an ISO feature.\\
MISRA-C:2004 Rule 4.2
3601   Min_Const             Trigraphs (??x) are an ISO feature.\\
MISRA-C:2004 Rule 4.2

3628   RULE007_1             Octal escape sequences used in a character constant or string literal.\\
MISRA-C:2004 Rule 7.1
3628   Min_Const             Octal escape sequences used in a character constant or string literal.\\
MISRA-C:2004 Rule 7.1

3629   RULE12_12             Union contains member of floating type.\\
MISRA-C:2004 Rule 12.12
3629   Min_Decl              Union contains member of floating type.\\
MISRA-C:2004 Rule 12.12

3635   RULE016_9             Function identifier used as a pointer without a preceding & operator.\\
MISRA-C:2004 Rule 16.9
3635   Min_Func              Function identifier used as a pointer without a preceding & operator.\\
MISRA-C:2004 Rule 16.9

3660   RULE006_5             Named bit-field consisting of a single bit declared with a signed type.\\
MISRA-C:2004 Rule 6.5
3660   Min_Array             Named bit-field consisting of a single bit declared with a signed type.\\
MISRA-C:2004 Rule 6.5

3664   RULE001_1             [E] Using a dot operator to access an individual bit is a language extension.\\
MISRA-C:2004 Rule 1.1
3664   Lang_ext              [E] Using a dot operator to access an individual bit is a language extension.\\
MISRA-C:2004 Rule 1.1

3665   RULE006_5             Unnamed bit-field consisting of a single bit declared with a signed type.\\
MISRA-C:2004 Rule 6.5
3665   Min_Array             Unnamed bit-field consisting of a single bit declared with a signed type.\\
MISRA-C:2004 Rule 6.5

3670   RULE016_2             Recursive call to function containing this call.\\
MISRA-C:2004 Rule 16.2
3670   Maj_Func              Recursive call to function containing this call.\\
MISRA-C:2004 Rule 16.2

3673   RULE016_7             The object addressed by the pointer parameter '%s' is not modified and so the pointer could be of type 'pointer to const'.\\
MISRA-C:2004 Rule 16.7
3673   Min_Decl              The object addressed by the pointer parameter '%s' is not modified and so the pointer could be of type 'pointer to const'.\\
MISRA-C:2004 Rule 16.7

3680   RULE001_2             [U] Indexing array with constant value that is out of bounds.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.3.6 Additive Operators, Semantics
3680   ISO_ExpU              [U] Indexing array with constant value that is out of bounds.\\
MISRA-C:2004 Rule 1.2; REFERENCE - ISO:C90-6.3.6 Additive Operators, Semantics

3684   RULE08_12             Array declared with unknown size.\\
MISRA-C:2004 Rule 8.12
3684   Min_Array             Array declared with unknown size.\\
MISRA-C:2004 Rule 8.12

3685   RULE021_1             [U] Indexing array with value that will definitely be out of bounds.\\
MISRA-C:2004 Rule 21.1; REFERENCE - ISO:C90-6.3.6 Additive Operators, Semantics
3685   ISO_ExpU              [U] Indexing array with value that will definitely be out of bounds.\\
MISRA-C:2004 Rule 21.1; REFERENCE - ISO:C90-6.3.6 Additive Operators, Semantics

3689   RULE021_1             [U] Indexing array with value that will apparently be out of bounds.\\
MISRA-C:2004 Rule 21.1; REFERENCE - ISO:C90-6.3.6 Additive Operators, Semantics
3689   ISO_ExpU              [U] Indexing array with value that will apparently be out of bounds.\\
MISRA-C:2004 Rule 21.1; REFERENCE - ISO:C90-6.3.6 Additive Operators, Semantics

3700   RULE006_2             Implicit conversion: char to signed char.\\
MISRA-C:2004 Rule 6.2
3700   Maj_Pchar             Implicit conversion: char to signed char.\\
MISRA-C:2004 Rule 6.2

3701   RULE006_2             Implicit conversion: char to unsigned char.\\
MISRA-C:2004 Rule 6.2
3701   Maj_Pchar             Implicit conversion: char to unsigned char.\\
MISRA-C:2004 Rule 6.2

3702   RULE003_1             Implicit conversion: char to short.\\
MISRA-C:2004 Rule 3.1
3702   Maj_Pchar             Implicit conversion: char to short.\\
MISRA-C:2004 Rule 3.1

3703   RULE003_1             Implicit conversion: char to unsigned short.\\
MISRA-C:2004 Rule 3.1
3703   Maj_Pchar             Implicit conversion: char to unsigned short.\\
MISRA-C:2004 Rule 3.1

3704   RULE003_1             Implicit conversion: char to int.\\
MISRA-C:2004 Rule 3.1
3704   Maj_Pchar             Implicit conversion: char to int.\\
MISRA-C:2004 Rule 3.1

3705   RULE003_1             Implicit conversion: char to unsigned int.\\
MISRA-C:2004 Rule 3.1
3705   Maj_Pchar             Implicit conversion: char to unsigned int.\\
MISRA-C:2004 Rule 3.1

3706   RULE003_1             Implicit conversion: char to long.\\
MISRA-C:2004 Rule 3.1
3706   Maj_Pchar             Implicit conversion: char to long.\\
MISRA-C:2004 Rule 3.1

3707   RULE003_1             Implicit conversion: char to unsigned long.\\
MISRA-C:2004 Rule 3.1
3707   Maj_Pchar             Implicit conversion: char to unsigned long.\\
MISRA-C:2004 Rule 3.1

3708   RULE010_1             Implicit conversion: char to float.\\
MISRA-C:2004 Rule 10.1
3708   Maj_Pchar             Implicit conversion: char to float.\\
MISRA-C:2004 Rule 10.1

3709   RULE010_1             Implicit conversion: char to double.\\
MISRA-C:2004 Rule 10.1
3709   Maj_Pchar             Implicit conversion: char to double.\\
MISRA-C:2004 Rule 10.1

3710   RULE010_1             Implicit conversion: char to long double.\\
MISRA-C:2004 Rule 10.1
3710   Maj_Pchar             Implicit conversion: char to long double.\\
MISRA-C:2004 Rule 10.1

3711   RULE006_1             Implicit conversion: unsigned char to char.\\
MISRA-C:2004 Rule 6.1
3711   Maj_Pchar             Implicit conversion: unsigned char to char.\\
MISRA-C:2004 Rule 6.1

3712   RULE010_1             Implicit conversion: unsigned char to signed char.\\
MISRA-C:2004 Rule 10.1
3712   Maj_UStoS             Implicit conversion: unsigned char to signed char.\\
MISRA-C:2004 Rule 10.1

3713   RULE010_1             Implicit conversion: unsigned char to short.\\
MISRA-C:2004 Rule 10.1
3713   Maj_UStoLS            Implicit conversion: unsigned char to short.\\
MISRA-C:2004 Rule 10.1

3715   RULE010_1             Implicit conversion: unsigned char to int.\\
MISRA-C:2004 Rule 10.1
3715   Maj_UStoLS            Implicit conversion: unsigned char to int.\\
MISRA-C:2004 Rule 10.1

3717   RULE010_1             Implicit conversion: unsigned char to long.\\
MISRA-C:2004 Rule 10.1
3717   Maj_UStoLS            Implicit conversion: unsigned char to long.\\
MISRA-C:2004 Rule 10.1

3719   RULE010_1             Implicit conversion: unsigned char to float.\\
MISRA-C:2004 Rule 10.1
3719   Maj_ItoFL             Implicit conversion: unsigned char to float.\\
MISRA-C:2004 Rule 10.1

3720   RULE010_1             Implicit conversion: unsigned char to double.\\
MISRA-C:2004 Rule 10.1
3720   Maj_ItoFL             Implicit conversion: unsigned char to double.\\
MISRA-C:2004 Rule 10.1

3721   RULE010_1             Implicit conversion: unsigned char to long double.\\
MISRA-C:2004 Rule 10.1
3721   Maj_ItoFL             Implicit conversion: unsigned char to long double.\\
MISRA-C:2004 Rule 10.1

3722   RULE006_1             Implicit conversion: signed char to char.\\
MISRA-C:2004 Rule 6.1
3722   Maj_Pchar             Implicit conversion: signed char to char.\\
MISRA-C:2004 Rule 6.1

3723   RULE010_1             Implicit conversion: signed char to unsigned char.\\
MISRA-C:2004 Rule 10.1
3723   Maj_StoUS             Implicit conversion: signed char to unsigned char.\\
MISRA-C:2004 Rule 10.1

3725   RULE010_1             Implicit conversion: signed char to unsigned short.\\
MISRA-C:2004 Rule 10.1
3725   Maj_StoUS             Implicit conversion: signed char to unsigned short.\\
MISRA-C:2004 Rule 10.1

3727   RULE010_1             Implicit conversion: signed char to unsigned int.\\
MISRA-C:2004 Rule 10.1
3727   Maj_StoUS             Implicit conversion: signed char to unsigned int.\\
MISRA-C:2004 Rule 10.1

3729   RULE010_1             Implicit conversion: signed char to unsigned long.\\
MISRA-C:2004 Rule 10.1
3729   Maj_StoUS             Implicit conversion: signed char to unsigned long.\\
MISRA-C:2004 Rule 10.1

3730   RULE010_1             Implicit conversion: signed char to float.\\
MISRA-C:2004 Rule 10.1
3730   Maj_ItoFL             Implicit conversion: signed char to float.\\
MISRA-C:2004 Rule 10.1

3731   RULE010_1             Implicit conversion: signed char to double.\\
MISRA-C:2004 Rule 10.1
3731   Maj_ItoFL             Implicit conversion: signed char to double.\\
MISRA-C:2004 Rule 10.1

3732   RULE010_1             Implicit conversion: signed char to long double.\\
MISRA-C:2004 Rule 10.1
3732   Maj_ItoFL             Implicit conversion: signed char to long double.\\
MISRA-C:2004 Rule 10.1

3733   RULE006_1             Implicit conversion: short to char.\\
MISRA-C:2004 Rule 6.1
3733   Maj_Pchar             Implicit conversion: short to char.\\
MISRA-C:2004 Rule 6.1

3734   RULE010_1             Implicit conversion: short to signed char.\\
MISRA-C:2004 Rule 10.1
3734   Maj_Small             Implicit conversion: short to signed char.\\
MISRA-C:2004 Rule 10.1

3735   RULE010_1             Implicit conversion: short to unsigned char.\\
MISRA-C:2004 Rule 10.1
3735   Maj_StoUS             Implicit conversion: short to unsigned char.\\
MISRA-C:2004 Rule 10.1

3736   RULE010_1             Implicit conversion: short to unsigned short.\\
MISRA-C:2004 Rule 10.1
3736   Maj_StoUS             Implicit conversion: short to unsigned short.\\
MISRA-C:2004 Rule 10.1

3738   RULE010_1             Implicit conversion: short to unsigned int.\\
MISRA-C:2004 Rule 10.1
3738   Maj_StoUS             Implicit conversion: short to unsigned int.\\
MISRA-C:2004 Rule 10.1

3740   RULE010_1             Implicit conversion: short to unsigned long.\\
MISRA-C:2004 Rule 10.1
3740   Maj_StoUS             Implicit conversion: short to unsigned long.\\
MISRA-C:2004 Rule 10.1

3741   RULE010_1             Implicit conversion: short to float.\\
MISRA-C:2004 Rule 10.1
3741   Maj_ItoFL             Implicit conversion: short to float.\\
MISRA-C:2004 Rule 10.1

3742   RULE010_1             Implicit conversion: short to double.\\
MISRA-C:2004 Rule 10.1
3742   Maj_ItoFL             Implicit conversion: short to double.\\
MISRA-C:2004 Rule 10.1

3743   RULE010_1             Implicit conversion: short to long double.\\
MISRA-C:2004 Rule 10.1
3743   Maj_ItoFL             Implicit conversion: short to long double.\\
MISRA-C:2004 Rule 10.1

3744   RULE006_1             Implicit conversion: unsigned short to char.\\
MISRA-C:2004 Rule 6.1
3744   Maj_Pchar             Implicit conversion: unsigned short to char.\\
MISRA-C:2004 Rule 6.1

3745   RULE010_1             Implicit conversion: unsigned short to signed char.\\
MISRA-C:2004 Rule 10.1
3745   Maj_UStoS             Implicit conversion: unsigned short to signed char.\\
MISRA-C:2004 Rule 10.1

3746   RULE010_1             Implicit conversion: unsigned short to unsigned char.\\
MISRA-C:2004 Rule 10.1
3746   Maj_Small             Implicit conversion: unsigned short to unsigned char.\\
MISRA-C:2004 Rule 10.1

3747   RULE010_1             Implicit conversion: unsigned short to short.\\
MISRA-C:2004 Rule 10.1
3747   Maj_UStoS             Implicit conversion: unsigned short to short.\\
MISRA-C:2004 Rule 10.1

3748   RULE010_1             Implicit conversion: unsigned short to int.\\
MISRA-C:2004 Rule 10.1
3748   Maj_UStoLS            Implicit conversion: unsigned short to int.\\
MISRA-C:2004 Rule 10.1

3750   RULE010_1             Implicit conversion: unsigned short to long.\\
MISRA-C:2004 Rule 10.1
3750   Maj_UStoLS            Implicit conversion: unsigned short to long.\\
MISRA-C:2004 Rule 10.1

3752   RULE010_1             Implicit conversion: unsigned short to float.\\
MISRA-C:2004 Rule 10.1
3752   Maj_ItoFL             Implicit conversion: unsigned short to float.\\
MISRA-C:2004 Rule 10.1

3753   RULE010_1             Implicit conversion: unsigned short to double.\\
MISRA-C:2004 Rule 10.1
3753   Maj_ItoFL             Implicit conversion: unsigned short to double.\\
MISRA-C:2004 Rule 10.1

3754   RULE010_1             Implicit conversion: unsigned short to long double.\\
MISRA-C:2004 Rule 10.1
3754   Maj_ItoFL             Implicit conversion: unsigned short to long double.\\
MISRA-C:2004 Rule 10.1

3755   RULE006_1             Implicit conversion: int to char.\\
MISRA-C:2004 Rule 6.1
3755   Maj_Pchar             Implicit conversion: int to char.\\
MISRA-C:2004 Rule 6.1

3756   RULE010_1             Implicit conversion: int to signed char.\\
MISRA-C:2004 Rule 10.1
3756   Maj_Small             Implicit conversion: int to signed char.\\
MISRA-C:2004 Rule 10.1

3757   RULE010_1             Implicit conversion: int to unsigned char.\\
MISRA-C:2004 Rule 10.1
3757   Maj_StoUS             Implicit conversion: int to unsigned char.\\
MISRA-C:2004 Rule 10.1

3758   RULE010_1             Implicit conversion: int to short.\\
MISRA-C:2004 Rule 10.1
3758   Maj_Small             Implicit conversion: int to short.\\
MISRA-C:2004 Rule 10.1

3759   RULE010_1             Implicit conversion: int to unsigned short.\\
MISRA-C:2004 Rule 10.1
3759   Maj_StoUS             Implicit conversion: int to unsigned short.\\
MISRA-C:2004 Rule 10.1

3760   RULE010_1             Implicit conversion: int to unsigned int.\\
MISRA-C:2004 Rule 10.1
3760   Maj_StoUS             Implicit conversion: int to unsigned int.\\
MISRA-C:2004 Rule 10.1

3762   RULE010_1             Implicit conversion: int to unsigned long.\\
MISRA-C:2004 Rule 10.1
3762   Maj_StoUS             Implicit conversion: int to unsigned long.\\
MISRA-C:2004 Rule 10.1

3763   RULE010_1             Implicit conversion: int to float.\\
MISRA-C:2004 Rule 10.1
3763   Maj_ItoFL             Implicit conversion: int to float.\\
MISRA-C:2004 Rule 10.1

3764   RULE010_1             Implicit conversion: int to double.\\
MISRA-C:2004 Rule 10.1
3764   Maj_ItoFL             Implicit conversion: int to double.\\
MISRA-C:2004 Rule 10.1

3765   RULE010_1             Implicit conversion: int to long double.\\
MISRA-C:2004 Rule 10.1
3765   Maj_ItoFL             Implicit conversion: int to long double.\\
MISRA-C:2004 Rule 10.1

3766   RULE006_1             Implicit conversion: unsigned int to char.\\
MISRA-C:2004 Rule 6.1
3766   Maj_Pchar             Implicit conversion: unsigned int to char.\\
MISRA-C:2004 Rule 6.1

3767   RULE010_1             Implicit conversion: unsigned int to signed char.\\
MISRA-C:2004 Rule 10.1
3767   Maj_UStoS             Implicit conversion: unsigned int to signed char.\\
MISRA-C:2004 Rule 10.1

3768   RULE010_1             Implicit conversion: unsigned int to unsigned char.\\
MISRA-C:2004 Rule 10.1
3768   Maj_Small             Implicit conversion: unsigned int to unsigned char.\\
MISRA-C:2004 Rule 10.1

3769   RULE010_1             Implicit conversion: unsigned int to short.\\
MISRA-C:2004 Rule 10.1
3769   Maj_UStoS             Implicit conversion: unsigned int to short.\\
MISRA-C:2004 Rule 10.1

3770   RULE010_1             Implicit conversion: unsigned int to unsigned short.\\
MISRA-C:2004 Rule 10.1
3770   Maj_Small             Implicit conversion: unsigned int to unsigned short.\\
MISRA-C:2004 Rule 10.1

3771   RULE010_1             Implicit conversion: unsigned int to int.\\
MISRA-C:2004 Rule 10.1
3771   Maj_UStoS             Implicit conversion: unsigned int to int.\\
MISRA-C:2004 Rule 10.1

3772   RULE010_1             Implicit conversion: unsigned int to long.\\
MISRA-C:2004 Rule 10.1
3772   Maj_UStoLS            Implicit conversion: unsigned int to long.\\
MISRA-C:2004 Rule 10.1

3774   RULE010_1             Implicit conversion: unsigned int to float.\\
MISRA-C:2004 Rule 10.1
3774   Maj_ItoFL             Implicit conversion: unsigned int to float.\\
MISRA-C:2004 Rule 10.1

3775   RULE010_1             Implicit conversion: unsigned int to double.\\
MISRA-C:2004 Rule 10.1
3775   Maj_ItoFL             Implicit conversion: unsigned int to double.\\
MISRA-C:2004 Rule 10.1

3776   RULE010_1             Implicit conversion: unsigned int to long double.\\
MISRA-C:2004 Rule 10.1
3776   Maj_ItoFL             Implicit conversion: unsigned int to long double.\\
MISRA-C:2004 Rule 10.1

3777   RULE006_1             Implicit conversion: long to char.\\
MISRA-C:2004 Rule 6.1
3777   Maj_Pchar             Implicit conversion: long to char.\\
MISRA-C:2004 Rule 6.1

3778   RULE010_1             Implicit conversion: long to signed char.\\
MISRA-C:2004 Rule 10.1
3778   Maj_Small             Implicit conversion: long to signed char.\\
MISRA-C:2004 Rule 10.1

3779   RULE010_1             Implicit conversion: long to unsigned char.\\
MISRA-C:2004 Rule 10.1
3779   Maj_StoUS             Implicit conversion: long to unsigned char.\\
MISRA-C:2004 Rule 10.1

3780   RULE010_1             Implicit conversion: long to short.\\
MISRA-C:2004 Rule 10.1
3780   Maj_Small             Implicit conversion: long to short.\\
MISRA-C:2004 Rule 10.1

3781   RULE010_1             Implicit conversion: long to unsigned short.\\
MISRA-C:2004 Rule 10.1
3781   Maj_StoUS             Implicit conversion: long to unsigned short.\\
MISRA-C:2004 Rule 10.1

3782   RULE010_1             Implicit conversion: long to int.\\
MISRA-C:2004 Rule 10.1
3782   Maj_Small             Implicit conversion: long to int.\\
MISRA-C:2004 Rule 10.1

3783   RULE010_1             Implicit conversion: long to unsigned int.\\
MISRA-C:2004 Rule 10.1
3783   Maj_StoUS             Implicit conversion: long to unsigned int.\\
MISRA-C:2004 Rule 10.1

3784   RULE010_1             Implicit conversion: long to unsigned long.\\
MISRA-C:2004 Rule 10.1
3784   Maj_StoUS             Implicit conversion: long to unsigned long.\\
MISRA-C:2004 Rule 10.1

3785   RULE010_1             Implicit conversion: long to float.\\
MISRA-C:2004 Rule 10.1
3785   Maj_ItoFL             Implicit conversion: long to float.\\
MISRA-C:2004 Rule 10.1

3786   RULE010_1             Implicit conversion: long to double.\\
MISRA-C:2004 Rule 10.1
3786   Maj_ItoFL             Implicit conversion: long to double.\\
MISRA-C:2004 Rule 10.1

3787   RULE010_1             Implicit conversion: long to long double.\\
MISRA-C:2004 Rule 10.1
3787   Maj_ItoFL             Implicit conversion: long to long double.\\
MISRA-C:2004 Rule 10.1

3788   RULE006_1             Implicit conversion: unsigned long to char.\\
MISRA-C:2004 Rule 6.1
3788   Maj_Pchar             Implicit conversion: unsigned long to char.\\
MISRA-C:2004 Rule 6.1

3789   RULE010_1             Implicit conversion: unsigned long to signed char.\\
MISRA-C:2004 Rule 10.1
3789   Maj_UStoS             Implicit conversion: unsigned long to signed char.\\
MISRA-C:2004 Rule 10.1

3790   RULE010_1             Implicit conversion: unsigned long to unsigned char.\\
MISRA-C:2004 Rule 10.1
3790   Maj_Small             Implicit conversion: unsigned long to unsigned char.\\
MISRA-C:2004 Rule 10.1

3791   RULE010_1             Implicit conversion: unsigned long to short.\\
MISRA-C:2004 Rule 10.1
3791   Maj_UStoS             Implicit conversion: unsigned long to short.\\
MISRA-C:2004 Rule 10.1

3792   RULE010_1             Implicit conversion: unsigned long to unsigned short.\\
MISRA-C:2004 Rule 10.1
3792   Maj_Small             Implicit conversion: unsigned long to unsigned short.\\
MISRA-C:2004 Rule 10.1

3793   RULE010_1             Implicit conversion: unsigned long to int.\\
MISRA-C:2004 Rule 10.1
3793   Maj_UStoS             Implicit conversion: unsigned long to int.\\
MISRA-C:2004 Rule 10.1

3794   RULE010_1             Implicit conversion: unsigned long to unsigned int.\\
MISRA-C:2004 Rule 10.1
3794   Maj_Small             Implicit conversion: unsigned long to unsigned int.\\
MISRA-C:2004 Rule 10.1

3795   RULE010_1             Implicit conversion: unsigned long to long.\\
MISRA-C:2004 Rule 10.1
3795   Maj_UStoS             Implicit conversion: unsigned long to long.\\
MISRA-C:2004 Rule 10.1

3796   RULE010_1             Implicit conversion: unsigned long to float.\\
MISRA-C:2004 Rule 10.1
3796   Maj_ItoFL             Implicit conversion: unsigned long to float.\\
MISRA-C:2004 Rule 10.1

3797   RULE010_1             Implicit conversion: unsigned long to double.\\
MISRA-C:2004 Rule 10.1
3797   Maj_ItoFL             Implicit conversion: unsigned long to double.\\
MISRA-C:2004 Rule 10.1

3798   RULE010_1             Implicit conversion: unsigned long to long double.\\
MISRA-C:2004 Rule 10.1
3798   Maj_ItoFL             Implicit conversion: unsigned long to long double.\\
MISRA-C:2004 Rule 10.1

3799   RULE010_2             Implicit conversion: float to char.\\
MISRA-C:2004 Rule 10.2
3799   Maj_FLtoI             Implicit conversion: float to char.\\
MISRA-C:2004 Rule 10.2

3800   RULE010_2             Implicit conversion: float to signed char.\\
MISRA-C:2004 Rule 10.2
3800   Maj_FLtoI             Implicit conversion: float to signed char.\\
MISRA-C:2004 Rule 10.2

3801   RULE010_2             Implicit conversion: float to unsigned char.\\
MISRA-C:2004 Rule 10.2
3801   Maj_FLtoI             Implicit conversion: float to unsigned char.\\
MISRA-C:2004 Rule 10.2

3802   RULE010_2             Implicit conversion: float to short.\\
MISRA-C:2004 Rule 10.2
3802   Maj_FLtoI             Implicit conversion: float to short.\\
MISRA-C:2004 Rule 10.2

3803   RULE010_2             Implicit conversion: float to unsigned short.\\
MISRA-C:2004 Rule 10.2
3803   Maj_FLtoI             Implicit conversion: float to unsigned short.\\
MISRA-C:2004 Rule 10.2

3804   RULE010_2             Implicit conversion: float to int.\\
MISRA-C:2004 Rule 10.2
3804   Maj_FLtoI             Implicit conversion: float to int.\\
MISRA-C:2004 Rule 10.2

3805   RULE010_2             Implicit conversion: float to unsigned int.\\
MISRA-C:2004 Rule 10.2
3805   Maj_FLtoI             Implicit conversion: float to unsigned int.\\
MISRA-C:2004 Rule 10.2

3806   RULE010_2             Implicit conversion: float to long.\\
MISRA-C:2004 Rule 10.2
3806   Maj_FLtoI             Implicit conversion: float to long.\\
MISRA-C:2004 Rule 10.2

3807   RULE010_2             Implicit conversion: float to unsigned long.\\
MISRA-C:2004 Rule 10.2
3807   Maj_FLtoI             Implicit conversion: float to unsigned long.\\
MISRA-C:2004 Rule 10.2

3810   RULE010_2             Implicit conversion: double to char.\\
MISRA-C:2004 Rule 10.2
3810   Maj_FLtoI             Implicit conversion: double to char.\\
MISRA-C:2004 Rule 10.2

3811   RULE010_2             Implicit conversion: double to signed char.\\
MISRA-C:2004 Rule 10.2
3811   Maj_FLtoI             Implicit conversion: double to signed char.\\
MISRA-C:2004 Rule 10.2

3812   RULE010_2             Implicit conversion: double to unsigned char.\\
MISRA-C:2004 Rule 10.2
3812   Maj_FLtoI             Implicit conversion: double to unsigned char.\\
MISRA-C:2004 Rule 10.2

3813   RULE010_2             Implicit conversion: double to short.\\
MISRA-C:2004 Rule 10.2
3813   Maj_FLtoI             Implicit conversion: double to short.\\
MISRA-C:2004 Rule 10.2

3814   RULE010_2             Implicit conversion: double to unsigned short.\\
MISRA-C:2004 Rule 10.2
3814   Maj_FLtoI             Implicit conversion: double to unsigned short.\\
MISRA-C:2004 Rule 10.2

3815   RULE010_2             Implicit conversion: double to int.\\
MISRA-C:2004 Rule 10.2
3815   Maj_FLtoI             Implicit conversion: double to int.\\
MISRA-C:2004 Rule 10.2

3816   RULE010_2             Implicit conversion: double to unsigned int.\\
MISRA-C:2004 Rule 10.2
3816   Maj_FLtoI             Implicit conversion: double to unsigned int.\\
MISRA-C:2004 Rule 10.2

3817   RULE010_2             Implicit conversion: double to long.\\
MISRA-C:2004 Rule 10.2
3817   Maj_FLtoI             Implicit conversion: double to long.\\
MISRA-C:2004 Rule 10.2

3818   RULE010_2             Implicit conversion: double to unsigned long.\\
MISRA-C:2004 Rule 10.2
3818   Maj_FLtoI             Implicit conversion: double to unsigned long.\\
MISRA-C:2004 Rule 10.2

3819   RULE010_2             Implicit conversion: double to float.\\
MISRA-C:2004 Rule 10.2
3819   Maj_Small             Implicit conversion: double to float.\\
MISRA-C:2004 Rule 10.2

3821   RULE010_2             Implicit conversion: long double to char.\\
MISRA-C:2004 Rule 10.2
3821   Maj_FLtoI             Implicit conversion: long double to char.\\
MISRA-C:2004 Rule 10.2

3822   RULE010_2             Implicit conversion: long double to signed char.\\
MISRA-C:2004 Rule 10.2
3822   Maj_FLtoI             Implicit conversion: long double to signed char.\\
MISRA-C:2004 Rule 10.2

3823   RULE010_2             Implicit conversion: long double to unsigned char.\\
MISRA-C:2004 Rule 10.2
3823   Maj_FLtoI             Implicit conversion: long double to unsigned char.\\
MISRA-C:2004 Rule 10.2

3824   RULE010_2             Implicit conversion: long double to short.\\
MISRA-C:2004 Rule 10.2
3824   Maj_FLtoI             Implicit conversion: long double to short.\\
MISRA-C:2004 Rule 10.2

3825   RULE010_2             Implicit conversion: long double to unsigned short .\\
MISRA-C:2004 Rule 10.2
3825   Maj_FLtoI             Implicit conversion: long double to unsigned short .\\
MISRA-C:2004 Rule 10.2

3826   RULE010_2             Implicit conversion: long double to int.\\
MISRA-C:2004 Rule 10.2
3826   Maj_FLtoI             Implicit conversion: long double to int.\\
MISRA-C:2004 Rule 10.2

3827   RULE010_2             Implicit conversion: long double to unsigned int.\\
MISRA-C:2004 Rule 10.2
3827   Maj_FLtoI             Implicit conversion: long double to unsigned int.\\
MISRA-C:2004 Rule 10.2

3828   RULE010_2             Implicit conversion: long double to long.\\
MISRA-C:2004 Rule 10.2
3828   Maj_FLtoI             Implicit conversion: long double to long.\\
MISRA-C:2004 Rule 10.2

3829   RULE010_2             Implicit conversion: long double to unsigned long.\\
MISRA-C:2004 Rule 10.2
3829   Maj_FLtoI             Implicit conversion: long double to unsigned long.\\
MISRA-C:2004 Rule 10.2

3830   RULE010_2             Implicit conversion: long double to float.\\
MISRA-C:2004 Rule 10.2
3830   Maj_Small             Implicit conversion: long double to float.\\
MISRA-C:2004 Rule 10.2

3831   RULE010_2             Implicit conversion: long double to double.\\
MISRA-C:2004 Rule 10.2
3831   Maj_Small             Implicit conversion: long double to double.\\
MISRA-C:2004 Rule 10.2

3832   RULE003_1             Implicit conversion: char to long long.\\
MISRA-C:2004 Rule 3.1
3832   Maj_Pchar             Implicit conversion: char to long long.\\
MISRA-C:2004 Rule 3.1

3833   RULE003_1             Implicit conversion: char to unsigned long long.\\
MISRA-C:2004 Rule 3.1
3833   Maj_Pchar             Implicit conversion: char to unsigned long long.\\
MISRA-C:2004 Rule 3.1

3834   RULE010_1             Implicit conversion: unsigned char to long long.\\
MISRA-C:2004 Rule 10.1
3834   Maj_UStoLS            Implicit conversion: unsigned char to long long.\\
MISRA-C:2004 Rule 10.1

3837   RULE010_1             Implicit conversion: signed char to unsigned long long.\\
MISRA-C:2004 Rule 10.1
3837   Maj_StoUS             Implicit conversion: signed char to unsigned long long.\\
MISRA-C:2004 Rule 10.1

3839   RULE010_1             Implicit conversion: short to unsigned long long.\\
MISRA-C:2004 Rule 10.1
3839   Maj_StoUS             Implicit conversion: short to unsigned long long.\\
MISRA-C:2004 Rule 10.1

3840   RULE010_1             Implicit conversion: unsigned short to long long.\\
MISRA-C:2004 Rule 10.1
3840   Maj_UStoLS            Implicit conversion: unsigned short to long long.\\
MISRA-C:2004 Rule 10.1

3843   RULE010_1             Implicit conversion: int to unsigned long long.\\
MISRA-C:2004 Rule 10.1
3843   Maj_StoUS             Implicit conversion: int to unsigned long long.\\
MISRA-C:2004 Rule 10.1

3844   RULE010_1             Implicit conversion: unsigned int to long long.\\
MISRA-C:2004 Rule 10.1
3844   Maj_UStoLS            Implicit conversion: unsigned int to long long.\\
MISRA-C:2004 Rule 10.1

3847   RULE010_1             Implicit conversion: long to unsigned long long.\\
MISRA-C:2004 Rule 10.1
3847   Maj_StoUS             Implicit conversion: long to unsigned long long.\\
MISRA-C:2004 Rule 10.1

3848   RULE010_1             Implicit conversion: unsigned long to long long.\\
MISRA-C:2004 Rule 10.1
3848   Maj_UStoLS            Implicit conversion: unsigned long to long long.\\
MISRA-C:2004 Rule 10.1

3850   RULE006_1             Implicit conversion: long long to char.\\
MISRA-C:2004 Rule 6.1
3850   Maj_Pchar             Implicit conversion: long long to char.\\
MISRA-C:2004 Rule 6.1

3851   RULE010_1             Implicit conversion: long long to signed char.\\
MISRA-C:2004 Rule 10.1
3851   Maj_Small             Implicit conversion: long long to signed char.\\
MISRA-C:2004 Rule 10.1

3852   RULE010_1             Implicit conversion: long long to unsigned char.\\
MISRA-C:2004 Rule 10.1
3852   Maj_StoUS             Implicit conversion: long long to unsigned char.\\
MISRA-C:2004 Rule 10.1

3853   RULE010_1             Implicit conversion: long long to short.\\
MISRA-C:2004 Rule 10.1
3853   Maj_Small             Implicit conversion: long long to short.\\
MISRA-C:2004 Rule 10.1

3854   RULE010_1             Implicit conversion: long long to unsigned short.\\
MISRA-C:2004 Rule 10.1
3854   Maj_StoUS             Implicit conversion: long long to unsigned short.\\
MISRA-C:2004 Rule 10.1

3855   RULE010_1             Implicit conversion: long long to int.\\
MISRA-C:2004 Rule 10.1
3855   Maj_Small             Implicit conversion: long long to int.\\
MISRA-C:2004 Rule 10.1

3856   RULE010_1             Implicit conversion: long long to unsigned int.\\
MISRA-C:2004 Rule 10.1
3856   Maj_StoUS             Implicit conversion: long long to unsigned int.\\
MISRA-C:2004 Rule 10.1

3857   RULE010_1             Implicit conversion: long long to long\\
MISRA-C:2004 Rule 10.1
3857   Maj_Small             Implicit conversion: long long to long\\
MISRA-C:2004 Rule 10.1

3858   RULE010_1             Implicit conversion: long long to unsigned long.\\
MISRA-C:2004 Rule 10.1
3858   Maj_StoUS             Implicit conversion: long long to unsigned long.\\
MISRA-C:2004 Rule 10.1

3859   RULE010_1             Implicit conversion: long long to unsigned long long.\\
MISRA-C:2004 Rule 10.1
3859   Maj_StoUS             Implicit conversion: long long to unsigned long long.\\
MISRA-C:2004 Rule 10.1

3860   RULE010_1             Implicit conversion: long long to float.\\
MISRA-C:2004 Rule 10.1
3860   Maj_ItoFL             Implicit conversion: long long to float.\\
MISRA-C:2004 Rule 10.1

3861   RULE010_1             Implicit conversion: long long to double.\\
MISRA-C:2004 Rule 10.1
3861   Maj_ItoFL             Implicit conversion: long long to double.\\
MISRA-C:2004 Rule 10.1

3862   RULE010_1             Implicit conversion: long long to long double.\\
MISRA-C:2004 Rule 10.1
3862   Maj_ItoFL             Implicit conversion: long long to long double.\\
MISRA-C:2004 Rule 10.1

3863   RULE006_1             Implicit conversion: unsigned long long to char.\\
MISRA-C:2004 Rule 6.1
3863   Maj_Pchar             Implicit conversion: unsigned long long to char.\\
MISRA-C:2004 Rule 6.1

3864   RULE010_1             Implicit conversion: unsigned long long to signed char.\\
MISRA-C:2004 Rule 10.1
3864   Maj_UStoS             Implicit conversion: unsigned long long to signed char.\\
MISRA-C:2004 Rule 10.1

3865   RULE010_1             Implicit conversion: unsigned long long to unsigned char.\\
MISRA-C:2004 Rule 10.1
3865   Maj_Small             Implicit conversion: unsigned long long to unsigned char.\\
MISRA-C:2004 Rule 10.1

3866   RULE010_1             Implicit conversion: unsigned long long to short.\\
MISRA-C:2004 Rule 10.1
3866   Maj_UStoS             Implicit conversion: unsigned long long to short.\\
MISRA-C:2004 Rule 10.1

3867   RULE010_1             Implicit conversion: unsigned long long to unsigned short.\\
MISRA-C:2004 Rule 10.1
3867   Maj_Small             Implicit conversion: unsigned long long to unsigned short.\\
MISRA-C:2004 Rule 10.1

3868   RULE010_1             Implicit conversion: unsigned long long to int.\\
MISRA-C:2004 Rule 10.1
3868   Maj_UStoS             Implicit conversion: unsigned long long to int.\\
MISRA-C:2004 Rule 10.1

3869   RULE010_1             Implicit conversion: unsigned long long to unsigned int.\\
MISRA-C:2004 Rule 10.1
3869   Maj_Small             Implicit conversion: unsigned long long to unsigned int.\\
MISRA-C:2004 Rule 10.1

3870   RULE010_1             Implicit conversion: unsigned long long to long.\\
MISRA-C:2004 Rule 10.1
3870   Maj_UStoS             Implicit conversion: unsigned long long to long.\\
MISRA-C:2004 Rule 10.1

3871   RULE010_1             Implicit conversion: unsigned long long to unsigned long.\\
MISRA-C:2004 Rule 10.1
3871   Maj_Small             Implicit conversion: unsigned long long to unsigned long.\\
MISRA-C:2004 Rule 10.1

3872   RULE010_1             Implicit conversion: unsigned long long to long long.\\
MISRA-C:2004 Rule 10.1
3872   Maj_UStoS             Implicit conversion: unsigned long long to long long.\\
MISRA-C:2004 Rule 10.1

3873   RULE010_1             Implicit conversion: unsigned long long to float.\\
MISRA-C:2004 Rule 10.1
3873   Maj_ItoFL             Implicit conversion: unsigned long long to float.\\
MISRA-C:2004 Rule 10.1

3874   RULE010_1             Implicit conversion: unsigned long long to double.\\
MISRA-C:2004 Rule 10.1
3874   Maj_ItoFL             Implicit conversion: unsigned long long to double.\\
MISRA-C:2004 Rule 10.1

3875   RULE010_1             Implicit conversion: unsigned long long to long double.\\
MISRA-C:2004 Rule 10.1
3875   Maj_ItoFL             Implicit conversion: unsigned long long to long double.\\
MISRA-C:2004 Rule 10.1

3876   RULE010_2             Implicit conversion: float to long long.\\
MISRA-C:2004 Rule 10.2
3876   Maj_FLtoI             Implicit conversion: float to long long.\\
MISRA-C:2004 Rule 10.2

3877   RULE010_2             Implicit conversion: float to unsigned long long.\\
MISRA-C:2004 Rule 10.2
3877   Maj_FLtoI             Implicit conversion: float to unsigned long long.\\
MISRA-C:2004 Rule 10.2

3878   RULE010_2             Implicit conversion: double to long long.\\
MISRA-C:2004 Rule 10.2
3878   Maj_FLtoI             Implicit conversion: double to long long.\\
MISRA-C:2004 Rule 10.2

3879   RULE010_2             Implicit conversion: double to unsigned long long.\\
MISRA-C:2004 Rule 10.2
3879   Maj_FLtoI             Implicit conversion: double to unsigned long long.\\
MISRA-C:2004 Rule 10.2

3880   RULE010_2             Implicit conversion: long double to long long.\\
MISRA-C:2004 Rule 10.2
3880   Maj_FLtoI             Implicit conversion: long double to long long.\\
MISRA-C:2004 Rule 10.2

3881   RULE010_2             Implicit conversion: long double to unsigned long long.\\
MISRA-C:2004 Rule 10.2
3881   Maj_FLtoI             Implicit conversion: long double to unsigned long long.\\
MISRA-C:2004 Rule 10.2

3900   RULE006_2             char value returned from signed char %s().\\
MISRA-C:2004 Rule 6.2
3900   Maj_Pchar             char value returned from signed char %s().\\
MISRA-C:2004 Rule 6.2

3901   RULE006_2             char value returned from unsigned char %s().\\
MISRA-C:2004 Rule 6.2
3901   Maj_Pchar             char value returned from unsigned char %s().\\
MISRA-C:2004 Rule 6.2

3902   RULE003_1             char value returned from short %s().\\
MISRA-C:2004 Rule 3.1
3902   Maj_Pchar             char value returned from short %s().\\
MISRA-C:2004 Rule 3.1

3903   RULE003_1             char value returned from unsigned short %s().\\
MISRA-C:2004 Rule 3.1
3903   Maj_Pchar             char value returned from unsigned short %s().\\
MISRA-C:2004 Rule 3.1

3904   RULE003_1             char value returned from int %s().\\
MISRA-C:2004 Rule 3.1
3904   Maj_Pchar             char value returned from int %s().\\
MISRA-C:2004 Rule 3.1

3905   RULE003_1             char value returned from unsigned int %s().\\
MISRA-C:2004 Rule 3.1
3905   Maj_Pchar             char value returned from unsigned int %s().\\
MISRA-C:2004 Rule 3.1

3906   RULE003_1             char value returned from long %s().\\
MISRA-C:2004 Rule 3.1
3906   Maj_Pchar             char value returned from long %s().\\
MISRA-C:2004 Rule 3.1

3907   RULE003_1             char value returned from unsigned long %s().\\
MISRA-C:2004 Rule 3.1
3907   Maj_Pchar             char value returned from unsigned long %s().\\
MISRA-C:2004 Rule 3.1

3908   RULE010_1             char value returned from float %s().\\
MISRA-C:2004 Rule 10.1
3908   Maj_Pchar             char value returned from float %s().\\
MISRA-C:2004 Rule 10.1

3909   RULE010_1             char value returned from double %s().\\
MISRA-C:2004 Rule 10.1
3909   Maj_Pchar             char value returned from double %s().\\
MISRA-C:2004 Rule 10.1

3910   RULE010_1             char value returned from long double %s().\\
MISRA-C:2004 Rule 10.1
3910   Maj_Pchar             char value returned from long double %s().\\
MISRA-C:2004 Rule 10.1

3911   RULE006_1             unsigned char value returned from char %s().\\
MISRA-C:2004 Rule 6.1
3911   Maj_Pchar             unsigned char value returned from char %s().\\
MISRA-C:2004 Rule 6.1

3912   RULE010_1             unsigned char value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1
3912   Maj_UStoS             unsigned char value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1

3913   RULE010_1             unsigned char value returned from short %s().\\
MISRA-C:2004 Rule 10.1
3913   Maj_UStoLS            unsigned char value returned from short %s().\\
MISRA-C:2004 Rule 10.1

3915   RULE010_1             unsigned char value returned from int %s().\\
MISRA-C:2004 Rule 10.1
3915   Maj_UStoLS            unsigned char value returned from int %s().\\
MISRA-C:2004 Rule 10.1

3917   RULE010_1             unsigned char value returned from long %s().\\
MISRA-C:2004 Rule 10.1
3917   Maj_UStoLS            unsigned char value returned from long %s().\\
MISRA-C:2004 Rule 10.1

3919   RULE010_1             unsigned char value returned from float %s().\\
MISRA-C:2004 Rule 10.1
3919   Maj_ItoFL             unsigned char value returned from float %s().\\
MISRA-C:2004 Rule 10.1

3920   RULE010_1             unsigned char value returned from double %s().\\
MISRA-C:2004 Rule 10.1
3920   Maj_ItoFL             unsigned char value returned from double %s().\\
MISRA-C:2004 Rule 10.1

3921   RULE010_1             unsigned char value returned from long double %s().\\
MISRA-C:2004 Rule 10.1
3921   Maj_ItoFL             unsigned char value returned from long double %s().\\
MISRA-C:2004 Rule 10.1

3922   RULE006_1             signed char value returned from char %s().\\
MISRA-C:2004 Rule 6.1
3922   Maj_Pchar             signed char value returned from char %s().\\
MISRA-C:2004 Rule 6.1

3923   RULE010_1             signed char value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1
3923   Maj_StoUS             signed char value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1

3925   RULE010_1             signed char value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.1
3925   Maj_StoUS             signed char value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.1

3927   RULE010_1             signed char value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.1
3927   Maj_StoUS             signed char value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.1

3929   RULE010_1             signed char value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.1
3929   Maj_StoUS             signed char value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.1

3930   RULE010_1             signed char value returned from float %s().\\
MISRA-C:2004 Rule 10.1
3930   Maj_ItoFL             signed char value returned from float %s().\\
MISRA-C:2004 Rule 10.1

3931   RULE010_1             signed char value returned from double %s().\\
MISRA-C:2004 Rule 10.1
3931   Maj_ItoFL             signed char value returned from double %s().\\
MISRA-C:2004 Rule 10.1

3932   RULE010_1             signed char value returned from long double %s().\\
MISRA-C:2004 Rule 10.1
3932   Maj_ItoFL             signed char value returned from long double %s().\\
MISRA-C:2004 Rule 10.1

3933   RULE006_1             short value returned from char %s().\\
MISRA-C:2004 Rule 6.1
3933   Maj_Pchar             short value returned from char %s().\\
MISRA-C:2004 Rule 6.1

3934   RULE010_1             short value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1
3934   Maj_Small             short value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1

3935   RULE010_1             short value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1
3935   Maj_StoUS             short value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1

3936   RULE010_1             short value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.1
3936   Maj_StoUS             short value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.1

3938   RULE010_1             short value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.1
3938   Maj_StoUS             short value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.1

3940   RULE010_1             short value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.1
3940   Maj_StoUS             short value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.1

3941   RULE010_1             short value returned from float %s().\\
MISRA-C:2004 Rule 10.1
3941   Maj_ItoFL             short value returned from float %s().\\
MISRA-C:2004 Rule 10.1

3942   RULE010_1             short value returned from double %s().\\
MISRA-C:2004 Rule 10.1
3942   Maj_ItoFL             short value returned from double %s().\\
MISRA-C:2004 Rule 10.1

3943   RULE010_1             short value returned from long double %s().\\
MISRA-C:2004 Rule 10.1
3943   Maj_ItoFL             short value returned from long double %s().\\
MISRA-C:2004 Rule 10.1

3944   RULE006_1             unsigned short value returned from char %s().\\
MISRA-C:2004 Rule 6.1
3944   Maj_Pchar             unsigned short value returned from char %s().\\
MISRA-C:2004 Rule 6.1

3945   RULE010_1             unsigned short value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1
3945   Maj_UStoS             unsigned short value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1

3946   RULE010_1             unsigned short value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1
3946   Maj_Small             unsigned short value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1

3947   RULE010_1             unsigned short value returned from short %s().\\
MISRA-C:2004 Rule 10.1
3947   Maj_UStoS             unsigned short value returned from short %s().\\
MISRA-C:2004 Rule 10.1

3948   RULE010_1             unsigned short value returned from int %s().\\
MISRA-C:2004 Rule 10.1
3948   Maj_UStoLS            unsigned short value returned from int %s().\\
MISRA-C:2004 Rule 10.1

3950   RULE010_1             unsigned short value returned from long %s().\\
MISRA-C:2004 Rule 10.1
3950   Maj_UStoLS            unsigned short value returned from long %s().\\
MISRA-C:2004 Rule 10.1

3952   RULE010_1             unsigned short value returned from float %s().\\
MISRA-C:2004 Rule 10.1
3952   Maj_ItoFL             unsigned short value returned from float %s().\\
MISRA-C:2004 Rule 10.1

3953   RULE010_1             unsigned short value returned from double %s().\\
MISRA-C:2004 Rule 10.1
3953   Maj_ItoFL             unsigned short value returned from double %s().\\
MISRA-C:2004 Rule 10.1

3954   RULE010_1             unsigned short value returned from long double %s().\\
MISRA-C:2004 Rule 10.1
3954   Maj_ItoFL             unsigned short value returned from long double %s().\\
MISRA-C:2004 Rule 10.1

3955   RULE006_1             int value returned from char %s().\\
MISRA-C:2004 Rule 6.1
3955   Maj_Pchar             int value returned from char %s().\\
MISRA-C:2004 Rule 6.1

3956   RULE010_1             int value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1
3956   Maj_Small             int value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1

3957   RULE010_1             int value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1
3957   Maj_StoUS             int value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1

3958   RULE010_1             int value returned from short %s().\\
MISRA-C:2004 Rule 10.1
3958   Maj_Small             int value returned from short %s().\\
MISRA-C:2004 Rule 10.1

3959   RULE010_1             int value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.1
3959   Maj_StoUS             int value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.1

3960   RULE010_1             int value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.1
3960   Maj_StoUS             int value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.1

3962   RULE010_1             int value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.1
3962   Maj_StoUS             int value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.1

3963   RULE010_1             int value returned from float %s().\\
MISRA-C:2004 Rule 10.1
3963   Maj_ItoFL             int value returned from float %s().\\
MISRA-C:2004 Rule 10.1

3964   RULE010_1             int value returned from double %s().\\
MISRA-C:2004 Rule 10.1
3964   Maj_ItoFL             int value returned from double %s().\\
MISRA-C:2004 Rule 10.1

3965   RULE010_1             int value returned from long double %s().\\
MISRA-C:2004 Rule 10.1
3965   Maj_ItoFL             int value returned from long double %s().\\
MISRA-C:2004 Rule 10.1

3966   RULE006_1             unsigned int value returned from char %s().\\
MISRA-C:2004 Rule 6.1
3966   Maj_Pchar             unsigned int value returned from char %s().\\
MISRA-C:2004 Rule 6.1

3967   RULE010_1             unsigned int value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1
3967   Maj_UStoS             unsigned int value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1

3968   RULE010_1             unsigned int value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1
3968   Maj_Small             unsigned int value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1

3969   RULE010_1             unsigned int value returned from short %s().\\
MISRA-C:2004 Rule 10.1
3969   Maj_UStoS             unsigned int value returned from short %s().\\
MISRA-C:2004 Rule 10.1

3970   RULE010_1             unsigned int value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.1
3970   Maj_Small             unsigned int value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.1

3971   RULE010_1             unsigned int value returned from int %s().\\
MISRA-C:2004 Rule 10.1
3971   Maj_UStoS             unsigned int value returned from int %s().\\
MISRA-C:2004 Rule 10.1

3972   RULE010_1             unsigned int value returned from long %s().\\
MISRA-C:2004 Rule 10.1
3972   Maj_UStoLS            unsigned int value returned from long %s().\\
MISRA-C:2004 Rule 10.1

3974   RULE010_1             unsigned int value returned from float %s().\\
MISRA-C:2004 Rule 10.1
3974   Maj_ItoFL             unsigned int value returned from float %s().\\
MISRA-C:2004 Rule 10.1

3975   RULE010_1             unsigned int value returned from double %s().\\
MISRA-C:2004 Rule 10.1
3975   Maj_ItoFL             unsigned int value returned from double %s().\\
MISRA-C:2004 Rule 10.1

3976   RULE010_1             unsigned int value returned from long double %s().\\
MISRA-C:2004 Rule 10.1
3976   Maj_ItoFL             unsigned int value returned from long double %s().\\
MISRA-C:2004 Rule 10.1

3977   RULE006_1             long value returned from char %s().\\
MISRA-C:2004 Rule 6.1
3977   Maj_Pchar             long value returned from char %s().\\
MISRA-C:2004 Rule 6.1

3978   RULE010_1             long value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1
3978   Maj_Small             long value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1

3979   RULE010_1             long value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1
3979   Maj_StoUS             long value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1

3980   RULE010_1             long value returned from short %s().\\
MISRA-C:2004 Rule 10.1
3980   Maj_Small             long value returned from short %s().\\
MISRA-C:2004 Rule 10.1

3981   RULE010_1             long value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.1
3981   Maj_StoUS             long value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.1

3982   RULE010_1             long value returned from int %s().\\
MISRA-C:2004 Rule 10.1
3982   Maj_Small             long value returned from int %s().\\
MISRA-C:2004 Rule 10.1

3983   RULE010_1             long value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.1
3983   Maj_StoUS             long value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.1

3984   RULE010_1             long value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.1
3984   Maj_StoUS             long value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.1

3985   RULE010_1             long value returned from float %s().\\
MISRA-C:2004 Rule 10.1
3985   Maj_ItoFL             long value returned from float %s().\\
MISRA-C:2004 Rule 10.1

3986   RULE010_1             long value returned from double %s().\\
MISRA-C:2004 Rule 10.1
3986   Maj_ItoFL             long value returned from double %s().\\
MISRA-C:2004 Rule 10.1

3987   RULE010_1             long value returned from long double %s().\\
MISRA-C:2004 Rule 10.1
3987   Maj_ItoFL             long value returned from long double %s().\\
MISRA-C:2004 Rule 10.1

3988   RULE006_1             unsigned long value returned from char %s().\\
MISRA-C:2004 Rule 6.1
3988   Maj_Pchar             unsigned long value returned from char %s().\\
MISRA-C:2004 Rule 6.1

3989   RULE010_1             unsigned long value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1
3989   Maj_UStoS             unsigned long value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1

3990   RULE010_1             unsigned long value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1
3990   Maj_Small             unsigned long value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1

3991   RULE010_1             unsigned long value returned from short %s().\\
MISRA-C:2004 Rule 10.1
3991   Maj_UStoS             unsigned long value returned from short %s().\\
MISRA-C:2004 Rule 10.1

3992   RULE010_1             unsigned long value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.1
3992   Maj_Small             unsigned long value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.1

3993   RULE010_1             unsigned long value returned from int %s().\\
MISRA-C:2004 Rule 10.1
3993   Maj_UStoS             unsigned long value returned from int %s().\\
MISRA-C:2004 Rule 10.1

3994   RULE010_1             unsigned long value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.1
3994   Maj_Small             unsigned long value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.1

3995   RULE010_1             unsigned long value returned from long %s().\\
MISRA-C:2004 Rule 10.1
3995   Maj_UStoS             unsigned long value returned from long %s().\\
MISRA-C:2004 Rule 10.1

3996   RULE010_1             unsigned long value returned from float %s().\\
MISRA-C:2004 Rule 10.1
3996   Maj_ItoFL             unsigned long value returned from float %s().\\
MISRA-C:2004 Rule 10.1

3997   RULE010_1             unsigned long value returned from double %s().\\
MISRA-C:2004 Rule 10.1
3997   Maj_ItoFL             unsigned long value returned from double %s().\\
MISRA-C:2004 Rule 10.1

3998   RULE010_1             unsigned long value returned from long double %s().\\
MISRA-C:2004 Rule 10.1
3998   Maj_ItoFL             unsigned long value returned from long double %s().\\
MISRA-C:2004 Rule 10.1

3999   RULE010_2             float value returned from char %s().\\
MISRA-C:2004 Rule 10.2
3999   Maj_FLtoI             float value returned from char %s().\\
MISRA-C:2004 Rule 10.2

4000   RULE010_2             float value returned from signed char %s().\\
MISRA-C:2004 Rule 10.2
4000   Maj_FLtoI             float value returned from signed char %s().\\
MISRA-C:2004 Rule 10.2

4001   RULE010_2             float value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.2
4001   Maj_FLtoI             float value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.2

4002   RULE010_2             float value returned from short %s().\\
MISRA-C:2004 Rule 10.2
4002   Maj_FLtoI             float value returned from short %s().\\
MISRA-C:2004 Rule 10.2

4003   RULE010_2             float value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.2
4003   Maj_FLtoI             float value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.2

4004   RULE010_2             float value returned from int %s().\\
MISRA-C:2004 Rule 10.2
4004   Maj_FLtoI             float value returned from int %s().\\
MISRA-C:2004 Rule 10.2

4005   RULE010_2             float value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.2
4005   Maj_FLtoI             float value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.2

4006   RULE010_2             float value returned from long %s().\\
MISRA-C:2004 Rule 10.2
4006   Maj_FLtoI             float value returned from long %s().\\
MISRA-C:2004 Rule 10.2

4007   RULE010_2             float value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.2
4007   Maj_FLtoI             float value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.2

4010   RULE010_2             double value returned from char %s().\\
MISRA-C:2004 Rule 10.2
4010   Maj_FLtoI             double value returned from char %s().\\
MISRA-C:2004 Rule 10.2

4011   RULE010_2             double value returned from signed char %s().\\
MISRA-C:2004 Rule 10.2
4011   Maj_FLtoI             double value returned from signed char %s().\\
MISRA-C:2004 Rule 10.2

4012   RULE010_2             double value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.2
4012   Maj_FLtoI             double value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.2

4013   RULE010_2             double value returned from short %s().\\
MISRA-C:2004 Rule 10.2
4013   Maj_FLtoI             double value returned from short %s().\\
MISRA-C:2004 Rule 10.2

4014   RULE010_2             double value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.2
4014   Maj_FLtoI             double value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.2

4015   RULE010_2             double value returned from int %s().\\
MISRA-C:2004 Rule 10.2
4015   Maj_FLtoI             double value returned from int %s().\\
MISRA-C:2004 Rule 10.2

4016   RULE010_2             double value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.2
4016   Maj_FLtoI             double value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.2

4017   RULE010_2             double value returned from long %s().\\
MISRA-C:2004 Rule 10.2
4017   Maj_FLtoI             double value returned from long %s().\\
MISRA-C:2004 Rule 10.2

4018   RULE010_2             double value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.2
4018   Maj_FLtoI             double value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.2

4019   RULE010_2             double value returned from float %s().\\
MISRA-C:2004 Rule 10.2
4019   Maj_Small             double value returned from float %s().\\
MISRA-C:2004 Rule 10.2

4021   RULE010_2             long double value returned from char %s().\\
MISRA-C:2004 Rule 10.2
4021   Maj_FLtoI             long double value returned from char %s().\\
MISRA-C:2004 Rule 10.2

4022   RULE010_2             long double value returned from signed char %s().\\
MISRA-C:2004 Rule 10.2
4022   Maj_FLtoI             long double value returned from signed char %s().\\
MISRA-C:2004 Rule 10.2

4023   RULE010_2             long double value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.2
4023   Maj_FLtoI             long double value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.2

4024   RULE010_2             long double value returned from short %s().\\
MISRA-C:2004 Rule 10.2
4024   Maj_FLtoI             long double value returned from short %s().\\
MISRA-C:2004 Rule 10.2

4025   RULE010_2             long double value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.2
4025   Maj_FLtoI             long double value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.2

4026   RULE010_2             long double value returned from int %s().\\
MISRA-C:2004 Rule 10.2
4026   Maj_FLtoI             long double value returned from int %s().\\
MISRA-C:2004 Rule 10.2

4027   RULE010_2             long double value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.2
4027   Maj_FLtoI             long double value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.2

4028   RULE010_2             long double value returned from long %s().\\
MISRA-C:2004 Rule 10.2
4028   Maj_FLtoI             long double value returned from long %s().\\
MISRA-C:2004 Rule 10.2

4029   RULE010_2             long double value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.2
4029   Maj_FLtoI             long double value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.2

4030   RULE010_2             long double value returned from float %s().\\
MISRA-C:2004 Rule 10.2
4030   Maj_Small             long double value returned from float %s().\\
MISRA-C:2004 Rule 10.2

4031   RULE010_2             long double value returned from double %s().\\
MISRA-C:2004 Rule 10.2
4031   Maj_Small             long double value returned from double %s().\\
MISRA-C:2004 Rule 10.2

4032   RULE003_1             char value returned from long long %s().\\
MISRA-C:2004 Rule 3.1
4032   Maj_Pchar             char value returned from long long %s().\\
MISRA-C:2004 Rule 3.1

4033   RULE003_1             char value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 3.1
4033   Maj_Pchar             char value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 3.1

4034   RULE010_1             unsigned char value returned from long long %s().\\
MISRA-C:2004 Rule 10.1
4034   Maj_UStoLS            unsigned char value returned from long long %s().\\
MISRA-C:2004 Rule 10.1

4037   RULE010_1             signed char value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.1
4037   Maj_StoUS             signed char value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.1

4039   RULE010_1             short value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.1
4039   Maj_StoUS             short value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.1

4040   RULE010_1             unsigned short value returned from long long %s().\\
MISRA-C:2004 Rule 10.1
4040   Maj_UStoLS            unsigned short value returned from long long %s().\\
MISRA-C:2004 Rule 10.1

4043   RULE010_1             int value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.1
4043   Maj_StoUS             int value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.1

4044   RULE010_1             unsigned int value returned from long long %s().\\
MISRA-C:2004 Rule 10.1
4044   Maj_UStoLS            unsigned int value returned from long long %s().\\
MISRA-C:2004 Rule 10.1

4047   RULE010_1             long value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.1
4047   Maj_StoUS             long value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.1

4048   RULE010_1             unsigned long value returned from long long %s().\\
MISRA-C:2004 Rule 10.1
4048   Maj_UStoLS            unsigned long value returned from long long %s().\\
MISRA-C:2004 Rule 10.1

4050   RULE006_1             long long value returned from char %s().\\
MISRA-C:2004 Rule 6.1
4050   Maj_Pchar             long long value returned from char %s().\\
MISRA-C:2004 Rule 6.1

4051   RULE010_1             long long value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1
4051   Maj_Small             long long value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1

4052   RULE010_1             long long value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1
4052   Maj_StoUS             long long value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1

4053   RULE010_1             long long value returned from short %s().\\
MISRA-C:2004 Rule 10.1
4053   Maj_Small             long long value returned from short %s().\\
MISRA-C:2004 Rule 10.1

4054   RULE010_1             long long value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.1
4054   Maj_StoUS             long long value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.1

4055   RULE010_1             long long value returned from int %s().\\
MISRA-C:2004 Rule 10.1
4055   Maj_Small             long long value returned from int %s().\\
MISRA-C:2004 Rule 10.1

4056   RULE010_1             long long value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.1
4056   Maj_StoUS             long long value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.1

4057   RULE010_1             long long value returned from long %s().\\
MISRA-C:2004 Rule 10.1
4057   Maj_Small             long long value returned from long %s().\\
MISRA-C:2004 Rule 10.1

4058   RULE010_1             long long value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.1
4058   Maj_StoUS             long long value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.1

4059   RULE010_1             long long value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.1
4059   Maj_StoUS             long long value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.1

4060   RULE010_1             long long value returned from float %s().\\
MISRA-C:2004 Rule 10.1
4060   Maj_ItoFL             long long value returned from float %s().\\
MISRA-C:2004 Rule 10.1

4061   RULE010_1             long long value returned from double %s().\\
MISRA-C:2004 Rule 10.1
4061   Maj_ItoFL             long long value returned from double %s().\\
MISRA-C:2004 Rule 10.1

4062   RULE010_1             long long value returned from long double %s().\\
MISRA-C:2004 Rule 10.1
4062   Maj_ItoFL             long long value returned from long double %s().\\
MISRA-C:2004 Rule 10.1

4063   RULE006_1             unsigned long long value returned from char %s().\\
MISRA-C:2004 Rule 6.1
4063   Maj_Pchar             unsigned long long value returned from char %s().\\
MISRA-C:2004 Rule 6.1

4064   RULE010_1             unsigned long long value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1
4064   Maj_UStoS             unsigned long long value returned from signed char %s().\\
MISRA-C:2004 Rule 10.1

4065   RULE010_1             unsigned long long value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1
4065   Maj_Small             unsigned long long value returned from unsigned char %s().\\
MISRA-C:2004 Rule 10.1

4066   RULE010_1             unsigned long long value returned from short %s().\\
MISRA-C:2004 Rule 10.1
4066   Maj_UStoS             unsigned long long value returned from short %s().\\
MISRA-C:2004 Rule 10.1

4067   RULE010_1             unsigned long long value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.1
4067   Maj_Small             unsigned long long value returned from unsigned short %s().\\
MISRA-C:2004 Rule 10.1

4068   RULE010_1             unsigned long long value returned from int %s().\\
MISRA-C:2004 Rule 10.1
4068   Maj_UStoS             unsigned long long value returned from int %s().\\
MISRA-C:2004 Rule 10.1

4069   RULE010_1             unsigned long long value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.1
4069   Maj_Small             unsigned long long value returned from unsigned int %s().\\
MISRA-C:2004 Rule 10.1

4070   RULE010_1             unsigned long long value returned from long %s().\\
MISRA-C:2004 Rule 10.1
4070   Maj_UStoS             unsigned long long value returned from long %s().\\
MISRA-C:2004 Rule 10.1

4071   RULE010_1             unsigned long long value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.1
4071   Maj_Small             unsigned long long value returned from unsigned long %s().\\
MISRA-C:2004 Rule 10.1

4072   RULE010_1             unsigned long long value returned from long long %s().\\
MISRA-C:2004 Rule 10.1
4072   Maj_UStoS             unsigned long long value returned from long long %s().\\
MISRA-C:2004 Rule 10.1

4073   RULE010_1             unsigned long long value returned from float %s().\\
MISRA-C:2004 Rule 10.1
4073   Maj_ItoFL             unsigned long long value returned from float %s().\\
MISRA-C:2004 Rule 10.1

4074   RULE010_1             unsigned long long value returned from double %s().\\
MISRA-C:2004 Rule 10.1
4074   Maj_ItoFL             unsigned long long value returned from double %s().\\
MISRA-C:2004 Rule 10.1

4075   RULE010_1             unsigned long long value returned from long double %s().\\
MISRA-C:2004 Rule 10.1
4075   Maj_ItoFL             unsigned long long value returned from long double %s().\\
MISRA-C:2004 Rule 10.1

4076   RULE010_2             float value returned from long long %s().\\
MISRA-C:2004 Rule 10.2
4076   Maj_FLtoI             float value returned from long long %s().\\
MISRA-C:2004 Rule 10.2

4077   RULE010_2             float value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.2
4077   Maj_FLtoI             float value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.2

4078   RULE010_2             double value returned from long long %s().\\
MISRA-C:2004 Rule 10.2
4078   Maj_FLtoI             double value returned from long long %s().\\
MISRA-C:2004 Rule 10.2

4079   RULE010_2             double value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.2
4079   Maj_FLtoI             double value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.2

4080   RULE010_2             long double value returned from long long %s().\\
MISRA-C:2004 Rule 10.2
4080   Maj_FLtoI             long double value returned from long long %s().\\
MISRA-C:2004 Rule 10.2

4081   RULE010_2             long double value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.2
4081   Maj_FLtoI             long double value returned from unsigned long long %s().\\
MISRA-C:2004 Rule 10.2

4101   RULE012_6             Both operands of & operator are "boolean" expressions.\\
MISRA-C:2004 Rule 12.6; REFERENCE - ISO:C90-6.3.10
4101   Maj_Ops               Both operands of & operator are "boolean" expressions.\\
MISRA-C:2004 Rule 12.6; REFERENCE - ISO:C90-6.3.10

4102   RULE012_6             Both operands of | operator are "boolean" expressions.\\
MISRA-C:2004 Rule 12.6; REFERENCE - ISO:C90-6.3.11
4102   Maj_Ops               Both operands of | operator are "boolean" expressions.\\
MISRA-C:2004 Rule 12.6; REFERENCE - ISO:C90-6.3.11

4103   RULE012_6             Both operands of arithmetic or bitwise operator are "boolean" expressions.\\
MISRA-C:2004 Rule 12.6
4103   Maj_Ops               Both operands of arithmetic or bitwise operator are "boolean" expressions.\\
MISRA-C:2004 Rule 12.6

4104   RULE012_6             Left hand operand of arithmetic or bitwise operator is a "boolean" expression.\\
MISRA-C:2004 Rule 12.6
4104   Maj_Ops               Left hand operand of arithmetic or bitwise operator is a "boolean" expression.\\
MISRA-C:2004 Rule 12.6

4105   RULE012_6             Right hand operand of arithmetic or bitwise operator is a "boolean" expression.\\
MISRA-C:2004 Rule 12.6
4105   Maj_Ops               Right hand operand of arithmetic or bitwise operator is a "boolean" expression.\\
MISRA-C:2004 Rule 12.6

4106   RULE012_6             Both operands of && operator are arithmetic or bitwise expressions.\\
MISRA-C:2004 Rule 12.6; REFERENCE - ISO:C90-6.3.13
4106   Maj_Ops               Both operands of && operator are arithmetic or bitwise expressions.\\
MISRA-C:2004 Rule 12.6; REFERENCE - ISO:C90-6.3.13

4107   RULE012_6             Both operands of || operator are arithmetic or bitwise expressions.\\
MISRA-C:2004 Rule 12.6; REFERENCE - ISO:C90-6.3.14
4107   Maj_Ops               Both operands of || operator are arithmetic or bitwise expressions.\\
MISRA-C:2004 Rule 12.6; REFERENCE - ISO:C90-6.3.14

4108   RULE012_6             Left hand operand of logical operator is an arithmetic or bitwise expression.\\
MISRA-C:2004 Rule 12.6
4108   Maj_Ops               Left hand operand of logical operator is an arithmetic or bitwise expression.\\
MISRA-C:2004 Rule 12.6

4109   RULE012_6             Right hand operand of logical operator is an arithmetic or bitwise expression.\\
MISRA-C:2004 Rule 12.6
4109   Maj_Ops               Right hand operand of logical operator is an arithmetic or bitwise expression.\\
MISRA-C:2004 Rule 12.6

4110   RULE012_6             Operand of ! operator is an arithmetic or bitwise expression.\\
MISRA-C:2004 Rule 12.6; REFERENCE - ISO:C90-6.3.3.3
4110   Maj_Ops               Operand of ! operator is an arithmetic or bitwise expression.\\
MISRA-C:2004 Rule 12.6; REFERENCE - ISO:C90-6.3.3.3

4111   RULE012_6             Right hand operand of relational operator is a "boolean" expression.\\
MISRA-C:2004 Rule 12.6
4111   Maj_Ops               Right hand operand of relational operator is a "boolean" expression.\\
MISRA-C:2004 Rule 12.6

4112   RULE012_6             Left hand operand of relational operator is a "boolean" expression.\\
MISRA-C:2004 Rule 12.6; REFERENCE - ISO:C90-6.3.8
4112   Maj_Ops               Left hand operand of relational operator is a "boolean" expression.\\
MISRA-C:2004 Rule 12.6; REFERENCE - ISO:C90-6.3.8

4113   RULE012_6             Both operands of relational operator are "boolean" expressions.\\
MISRA-C:2004 Rule 12.6; REFERENCE - ISO:C90-6.3.8
4113   Maj_Ops               Both operands of relational operator are "boolean" expressions.\\
MISRA-C:2004 Rule 12.6; REFERENCE - ISO:C90-6.3.8

4114   RULE012_6             Operand of ~ operator is a "boolean" expression.\\
MISRA-C:2004 Rule 12.6; REFERENCE - ISO:C90-6.3.3.3
4114   Maj_Ops               Operand of ~ operator is a "boolean" expression.\\
MISRA-C:2004 Rule 12.6; REFERENCE - ISO:C90-6.3.3.3

4120   RULE010_1             Implicit conversion: complex expression of integral type to wider type.\\
MISRA-C:2004 Rule 10.1
4120   Min_Stmt              Implicit conversion: complex expression of integral type to wider type.\\
MISRA-C:2004 Rule 10.1

4121   RULE010_3             Cast of complex expression of integral type to wider type.\\
MISRA-C:2004 Rule 10.3
4121   Min_Stmt              Cast of complex expression of integral type to wider type.\\
MISRA-C:2004 Rule 10.3

4123   RULE010_2             Implicit conversion: complex expression of type float to type double.\\
MISRA-C:2004 Rule 10.2
4123   Min_Stmt              Implicit conversion: complex expression of type float to type double.\\
MISRA-C:2004 Rule 10.2

4124   RULE010_2             Implicit conversion: complex expression of type float to type long double.\\
MISRA-C:2004 Rule 10.2
4124   Min_Stmt              Implicit conversion: complex expression of type float to type long double.\\
MISRA-C:2004 Rule 10.2

4125   RULE010_2             Implicit conversion: complex expression of type double to type long double.\\
MISRA-C:2004 Rule 10.2
4125   Min_Stmt              Implicit conversion: complex expression of type double to type long double.\\
MISRA-C:2004 Rule 10.2

4126   RULE010_4             Cast of complex expression of type float to type double.\\
MISRA-C:2004 Rule 10.4
4126   Min_Stmt              Cast of complex expression of type float to type double.\\
MISRA-C:2004 Rule 10.4

4127   RULE010_4             Cast of complex expression of type float to type long double.\\
MISRA-C:2004 Rule 10.4
4127   Min_Stmt              Cast of complex expression of type float to type long double.\\
MISRA-C:2004 Rule 10.4

4128   RULE010_4             Cast of complex expression of type double to type long double.\\
MISRA-C:2004 Rule 10.4
4128   Min_Stmt              Cast of complex expression of type double to type long double.\\
MISRA-C:2004 Rule 10.4

4130   RULE012_7             Bitwise operations on signed data will give implementation defined results.\\
MISRA-C:2004 Rule 12.7; REFERENCE - ISO:C90-6.3
4130   Maj_Ops               Bitwise operations on signed data will give implementation defined results.\\
MISRA-C:2004 Rule 12.7; REFERENCE - ISO:C90-6.3

4131   RULE012_7             Left shift operation on signed operand.\\
MISRA-C:2004 Rule 12.7
4131   Min_Ops               Left shift operation on signed operand.\\
MISRA-C:2004 Rule 12.7

4140   RULE017_6             Function returns address of automatic data.\\
MISRA-C:2004 Rule 17.6; REFERENCE - ISO:C90-6.1.2.4
4140   Maj_Ops               Function returns address of automatic data.\\
MISRA-C:2004 Rule 17.6; REFERENCE - ISO:C90-6.1.2.4

5013   RULE006_3             Use of basic type '%s'.\\
MISRA-C:2004 Rule 6.3

5069   RULE016_1             Functions shall not be defined with a variable number of arguments.\\
MISRA-C:2004 Rule 16.1

5087   RULE019_1             #include statements in a file should only be preceded by other preprocessor directives or comments.\\
MISRA-C:2004 Rule 19.1

5102   RULE017_5             The declaration of objects should contain no more than 2 levels of pointer indirection.\\
MISRA-C:2004 Rule 17.5

5114   RULE020_1             Definition or redefinition of standard library function, errno or assert (%s).\\
MISRA-C:2004 Rule 20.1

5115   RULE020_2             The names of standard library macros, objects and functions shall not be reused.\\
MISRA-C:2004 Rule 20.2

5118   RULE020_4             Dynamic heap memory allocation shall not be used.\\
MISRA-C:2004 Rule 20.4

5119   RULE020_5             The error indicator errno shall not be used.\\
MISRA-C:2004 Rule 20.5

5120   RULE020_6             The macro offsetof, in library <stddef.h>, shall not be used.\\
MISRA-C:2004 Rule 20.6

5122   RULE020_7             The setjmp macro and the longjmp function shall not be used.\\
MISRA-C:2004 Rule 20.7

5123   RULE020_8             The signal handling facilities of <signal.h> shall not be used.\\
MISRA-C:2004 Rule 20.8

5124   RULE020_9             The input/output library <stdio.h> shall not be used in production code.\\
MISRA-C:2004 Rule 20.9

5125   RULE20_10             The library functions atof, atoi and atol from library <stdlib.h> shall not be used.\\
MISRA-C:2004 Rule 20.10

5126   RULE20_11             The library functions abort, exit, getenv and system from library <stdlib.h> shall not be used.\\
MISRA-C:2004 Rule 20.11

5127   RULE20_12             The time handling functions of library <time.h> shall not be used.\\
MISRA-C:2004 Rule 20.12

5214   RULE020_1             Undefine of standard library function, errno or assert (%s).\\
MISRA-C:2004 Rule 20.1





*==========================================================
* Metrics limit violation messages below added by Volvo 3P.
*==========================================================

* STLIN
8000   Metrics               Metrics violation, Number of Maintainable Code Lines. Limit 200, function %s.

* STCYC
8001   Metrics               Metrics violation, Cyclomatic Complexity. Limit 15, function %s.

* STPTH
8002   Metrics               Metrics violation, Estimated Static Path Count. Limit 2000, function %s.

* STMIF
8003   Metrics               Metrics violation, Maximum Nesting of Control Structures. Limit 7, function %s.

* STTPP
8004   Metrics               Metrics violation, Total Unpreprocessed Source Lines. Limit 1200, this file : %s.

* STSCT
8005   Metrics               Metrics violation, Number of Static Declarationss. Limit 20, this file : %s.

* STECT
8006   Metrics               Metrics violation, Number of External Variables. Limit 0, this file : %s.

